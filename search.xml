<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>myql-base</title>
      <link href="/2025/06/10/myql-base/"/>
      <url>/2025/06/10/myql-base/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-使用指南：从入门到实践"><a href="#MySQL-使用指南：从入门到实践" class="headerlink" title="MySQL 使用指南：从入门到实践"></a>MySQL 使用指南：从入门到实践</h1><h2 id="登录-MySQL"><a href="#登录-MySQL" class="headerlink" title="登录 MySQL"></a>登录 MySQL</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u 用户名 -p</span><br></pre></td></tr></table></figure><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 显示所有数据库</span></span><br><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE mydb;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用数据库</span></span><br><span class="line">USE mydb;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除数据库</span></span><br><span class="line"><span class="keyword">DROP</span> DATABASE mydb;</span><br></pre></td></tr></table></figure><h2 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    username <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">UNIQUE</span>,</span><br><span class="line">    created_at <span class="type">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 显示表结构</span></span><br><span class="line"><span class="keyword">DESCRIBE</span> users;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改表</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> age <span class="type">INT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> users;</span><br></pre></td></tr></table></figure><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (username, email, age) </span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;john_doe&#x27;</span>, <span class="string">&#x27;john@example.com&#x27;</span>, <span class="number">30</span>);</span><br><span class="line">## 查询数据</span><br><span class="line"><span class="keyword">sql</span></span><br><span class="line"><span class="comment">-- 基本查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 条件查询</span></span><br><span class="line"><span class="keyword">SELECT</span> username, email <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 排序</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">ORDER</span> <span class="keyword">BY</span> created_at <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 分页</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users LIMIT <span class="number">10</span> <span class="keyword">OFFSET</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure><h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> users <span class="keyword">SET</span> age <span class="operator">=</span> <span class="number">31</span> <span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;john_doe&#x27;</span>;</span><br><span class="line">## 删除数据</span><br><span class="line"><span class="keyword">sql</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建索引</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_username <span class="keyword">ON</span> users(username);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 显示索引</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> users;</span><br></pre></td></tr></table></figure><h2 id="事务处理"><a href="#事务处理" class="headerlink" title="事务处理"></a>事务处理</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders (user_id, amount) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">100</span> <span class="keyword">WHERE</span> user_id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="comment">-- 或 ROLLBACK;</span></span><br></pre></td></tr></table></figure><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> GetUserCount()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> total_users <span class="keyword">FROM</span> users;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用存储过程</span></span><br><span class="line"><span class="keyword">CALL</span> GetUserCount();</span><br></pre></td></tr></table></figure><h2 id="内连接-INNER-JOIN"><a href="#内连接-INNER-JOIN" class="headerlink" title="内连接 (INNER JOIN)"></a>内连接 (INNER JOIN)</h2><p>内连接返回两个表中连接字段匹配的行。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.id, a.name, b.order_date, b.amount</span><br><span class="line"><span class="keyword">FROM</span> customers a</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> orders b <span class="keyword">ON</span> a.id <span class="operator">=</span> b.customer_id;</span><br></pre></td></tr></table></figure><h2 id="左连接-LEFT-JOIN"><a href="#左连接-LEFT-JOIN" class="headerlink" title="左连接 (LEFT JOIN)"></a>左连接 (LEFT JOIN)</h2><p>左连接返回左表的所有记录，即使右表中没有匹配。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.id, a.name, b.order_date, b.amount</span><br><span class="line"><span class="keyword">FROM</span> customers a</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> orders b <span class="keyword">ON</span> a.id <span class="operator">=</span> b.customer_id;</span><br></pre></td></tr></table></figure><h2 id="右连接-RIGHT-JOIN"><a href="#右连接-RIGHT-JOIN" class="headerlink" title="右连接 (RIGHT JOIN)"></a>右连接 (RIGHT JOIN)</h2><p>右连接返回右表的所有记录，即使左表中没有匹配。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.id, a.name, b.order_date, b.amount</span><br><span class="line"><span class="keyword">FROM</span> customers a</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> orders b <span class="keyword">ON</span> a.id <span class="operator">=</span> b.customer_id;</span><br></pre></td></tr></table></figure><h2 id="全连接-FULL-JOIN"><a href="#全连接-FULL-JOIN" class="headerlink" title="全连接 (FULL JOIN)"></a>全连接 (FULL JOIN)</h2><p>MySQL 不直接支持 FULL JOIN，但可以通过 UNION 实现：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.id, a.name, b.order_date, b.amount</span><br><span class="line"><span class="keyword">FROM</span> customers a</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> orders b <span class="keyword">ON</span> a.id <span class="operator">=</span> b.customer_id</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> a.id, a.name, b.order_date, b.amount</span><br><span class="line"><span class="keyword">FROM</span> customers a</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> orders b <span class="keyword">ON</span> a.id <span class="operator">=</span> b.customer_id</span><br><span class="line"><span class="keyword">WHERE</span> a.id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><h2 id="交叉连接-CROSS-JOIN"><a href="#交叉连接-CROSS-JOIN" class="headerlink" title="交叉连接 (CROSS JOIN)"></a>交叉连接 (CROSS JOIN)</h2><p>返回两个表的笛卡尔积。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.id, a.name, b.order_date, b.amount</span><br><span class="line"><span class="keyword">FROM</span> customers a</span><br><span class="line"><span class="keyword">CROSS</span> <span class="keyword">JOIN</span> orders b;</span><br></pre></td></tr></table></figure><h2 id="自连接-SELF-JOIN"><a href="#自连接-SELF-JOIN" class="headerlink" title="自连接 (SELF JOIN)"></a>自连接 (SELF JOIN)</h2><p>表与自身连接。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.name <span class="keyword">AS</span> employee, b.name <span class="keyword">AS</span> manager</span><br><span class="line"><span class="keyword">FROM</span> employees a</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> employees b <span class="keyword">ON</span> a.manager_id <span class="operator">=</span> b.id;</span><br></pre></td></tr></table></figure><h2 id="多表查询的复杂示例"><a href="#多表查询的复杂示例" class="headerlink" title="多表查询的复杂示例"></a>多表查询的复杂示例</h2><h2 id="三表连接示例"><a href="#三表连接示例" class="headerlink" title="三表连接示例"></a>三表连接示例</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    c.name <span class="keyword">AS</span> customer_name,</span><br><span class="line">    p.name <span class="keyword">AS</span> product_name,</span><br><span class="line">    o.order_date,</span><br><span class="line">    oi.quantity,</span><br><span class="line">    oi.price</span><br><span class="line"><span class="keyword">FROM</span> customers c</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> orders o <span class="keyword">ON</span> c.id <span class="operator">=</span> o.customer_id</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> order_items oi <span class="keyword">ON</span> o.id <span class="operator">=</span> oi.order_id</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> products p <span class="keyword">ON</span> oi.product_id <span class="operator">=</span> p.id</span><br><span class="line"><span class="keyword">WHERE</span> o.order_date <span class="operator">&gt;</span> <span class="string">&#x27;2023-01-01&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> o.order_date <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h2 id="子查询作为表连接"><a href="#子查询作为表连接" class="headerlink" title="子查询作为表连接"></a>子查询作为表连接</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    a.name,</span><br><span class="line">    b.total_orders</span><br><span class="line"><span class="keyword">FROM</span> customers a</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> customer_id, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> total_orders</span><br><span class="line">    <span class="keyword">FROM</span> orders</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> customer_id</span><br><span class="line">) b <span class="keyword">ON</span> a.id <span class="operator">=</span> b.customer_id;</span><br></pre></td></tr></table></figure><h2 id="SQL-关键字的执行顺序"><a href="#SQL-关键字的执行顺序" class="headerlink" title="SQL 关键字的执行顺序"></a>SQL 关键字的执行顺序</h2><p>理解 SQL 关键字的执行顺序对于编写高效查询和调试复杂 SQL 非常重要。以下是 SQL 语句的逻辑处理顺序（不是书写顺序）：</p><ul><li><p>FROM - 确定查询的数据源</p></li><li><p>ON - 应用连接条件</p></li><li><p>JOIN - 执行表连接</p></li><li><p>WHERE - 过滤行数据</p></li><li><p>GROUP BY - 分组数据</p></li><li><p>HAVING - 过滤分组后的数据</p></li><li><p>SELECT - 选择要返回的列</p></li><li><p>DISTINCT - 去除重复行</p></li><li><p>ORDER BY - 排序结果</p></li><li><p>LIMIT&#x2F;OFFSET - 限制返回行数</p></li></ul><p>执行顺序示例分析</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    department_id,</span><br><span class="line">    <span class="built_in">AVG</span>(salary) <span class="keyword">AS</span> avg_salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> hire_date <span class="operator">&gt;</span> <span class="string">&#x27;2020-01-01&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(salary) <span class="operator">&gt;</span> <span class="number">5000</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> avg_salary <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>实际执行顺序：</p><ul><li><p>FROM employees - 从employees表获取数据</p></li><li><p>WHERE hire_date &gt; ‘2020-01-01’ - 过滤入职日期</p></li><li><p>GROUP BY department_id - 按部门分组</p></li><li><p>HAVING AVG(salary) &gt; 5000 - 过滤平均工资&gt;5000的部门</p></li><li><p>SELECT department_id, AVG(salary) - 选择要显示的列</p></li><li><p>ORDER BY avg_salary DESC - 按平均工资降序排序</p></li><li><p>LIMIT 10 - 只返回前10条记录</p></li></ul><p>备注：8.0以后的with语句</p><h2 id="一、基本语法"><a href="#一、基本语法" class="headerlink" title="一、基本语法"></a>一、基本语法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> cte_name <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> ...  <span class="comment">-- 定义CTE的查询</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> cte_name;  <span class="comment">-- 使用CTE</span></span><br></pre></td></tr></table></figure><h2 id="二、CTE-的主要类型"><a href="#二、CTE-的主要类型" class="headerlink" title="二、CTE 的主要类型"></a>二、CTE 的主要类型</h2><ol><li>非递归 CTE<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> department_stats <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        department_id,</span><br><span class="line">        <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> employee_count,</span><br><span class="line">        <span class="built_in">AVG</span>(salary) <span class="keyword">AS</span> avg_salary</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    d.department_name,</span><br><span class="line">    ds.employee_count,</span><br><span class="line">    ds.avg_salary</span><br><span class="line"><span class="keyword">FROM</span> departments d</span><br><span class="line"><span class="keyword">JOIN</span> department_stats ds <span class="keyword">ON</span> d.department_id <span class="operator">=</span> ds.department_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ds.avg_salary <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure></li><li>递归 CTE<br>递归 CTE 可以引用自身，常用于处理层次结构数据（如组织结构、评论树等）。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> <span class="keyword">RECURSIVE</span> employee_hierarchy <span class="keyword">AS</span> (</span><br><span class="line">    <span class="comment">-- 基础查询（锚成员）</span></span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        id,</span><br><span class="line">        name,</span><br><span class="line">        manager_id,</span><br><span class="line">        <span class="number">1</span> <span class="keyword">AS</span> level</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">WHERE</span> manager_id <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">-- 递归查询（递归成员）</span></span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        e.id,</span><br><span class="line">        e.name,</span><br><span class="line">        e.manager_id,</span><br><span class="line">        eh.level <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">FROM</span> employees e</span><br><span class="line">    <span class="keyword">JOIN</span> employee_hierarchy eh <span class="keyword">ON</span> e.manager_id <span class="operator">=</span> eh.id</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employee_hierarchy <span class="keyword">ORDER</span> <span class="keyword">BY</span> level, name;</span><br></pre></td></tr></table></figure><h2 id="三、CTE-的执行顺序"><a href="#三、CTE-的执行顺序" class="headerlink" title="三、CTE 的执行顺序"></a>三、CTE 的执行顺序</h2><p>在包含 WITH 子句的查询中，执行顺序如下：</p><p>首先评估所有 CTE：按照它们在查询中出现的顺序</p><p>然后执行主查询：可以引用已定义的 CTE</p><p>CTE 只在当前查询中有效：不会影响其他查询</p><h2 id="四、多-CTE-示例"><a href="#四、多-CTE-示例" class="headerlink" title="四、多 CTE 示例"></a>四、多 CTE 示例</h2><p>可以在一个查询中定义多个 CTE：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> </span><br><span class="line">high_salary_employees <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> salary <span class="operator">&gt;</span> <span class="number">10000</span></span><br><span class="line">),</span><br><span class="line">department_budgets <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        department_id,</span><br><span class="line">        <span class="built_in">SUM</span>(salary) <span class="keyword">AS</span> total_salary</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    d.department_name,</span><br><span class="line">    <span class="built_in">COUNT</span>(hse.id) <span class="keyword">AS</span> high_salary_count,</span><br><span class="line">    db.total_salary</span><br><span class="line"><span class="keyword">FROM</span> departments d</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> high_salary_employees hse <span class="keyword">ON</span> d.department_id <span class="operator">=</span> hse.department_id</span><br><span class="line"><span class="keyword">JOIN</span> department_budgets db <span class="keyword">ON</span> d.department_id <span class="operator">=</span> db.department_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> d.department_id, d.department_name, db.total_salary;</span><br></pre></td></tr></table></figure><h2 id="五、CTE-与子查询的比较"><a href="#五、CTE-与子查询的比较" class="headerlink" title="五、CTE 与子查询的比较"></a>五、CTE 与子查询的比较</h2><table><thead><tr><th align="center">特性</th><th align="left">CTE</th><th align="left">子查询</th></tr></thead><tbody><tr><td align="center">可读性</td><td align="left">高，可以命名和模块化</td><td align="left">低，嵌套层次多时难以理解</td></tr><tr><td align="center">重用性</td><td align="left">可在同一查询中多次引用</td><td align="left">每次需要重复定义</td></tr><tr><td align="center">递归能力</td><td align="left"></td><td align="left">支持递归查询</td></tr><tr><td align="center">性能</td><td align="left">通常与子查询相当</td><td align="left">取决于具体实现</td></tr></tbody></table><h2 id="六、CTE-的实际应用场景"><a href="#六、CTE-的实际应用场景" class="headerlink" title="六、CTE 的实际应用场景"></a>六、CTE 的实际应用场景</h2><p>简化复杂查询：将复杂逻辑分解为多个逻辑块</p><p>递归查询：处理树形结构数据</p><p>数据准备：预先计算中间结果</p><p>替代视图：当只需要一次性使用时</p><p>分步调试：可以逐步构建和测试查询部分</p><h2 id="七、性能考虑"><a href="#七、性能考虑" class="headerlink" title="七、性能考虑"></a>七、性能考虑</h2><p>物化：MySQL 可能会将 CTE 物化为临时表</p><p>优化器限制：某些优化可能不如直接使用子查询</p><p>递归深度：递归 CTE 有默认 1000 的深度限制，可通过 cte_max_recursion_depth 调整</p><h2 id="八、递归-CTE-深度控制"><a href="#八、递归-CTE-深度控制" class="headerlink" title="八、递归 CTE 深度控制"></a>八、递归 CTE 深度控制</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> SESSION cte_max_recursion_depth <span class="operator">=</span> <span class="number">2000</span>;  <span class="comment">-- 增加递归深度限制</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">RECURSIVE</span> cte <span class="keyword">AS</span> (</span><br><span class="line">    <span class="comment">-- 基础查询</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">AS</span> n</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">-- 递归部分</span></span><br><span class="line">    <span class="keyword">SELECT</span> n <span class="operator">+</span> <span class="number">1</span> <span class="keyword">FROM</span> cte <span class="keyword">WHERE</span> n <span class="operator">&lt;</span> <span class="number">1500</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> cte;</span><br></pre></td></tr></table></figure><h2 id="九、CTE-与临时表的比较"><a href="#九、CTE-与临时表的比较" class="headerlink" title="九、CTE 与临时表的比较"></a>九、CTE 与临时表的比较</h2><table><thead><tr><th align="center">特性</th><th align="left">CTE</th><th align="left">临时表</th></tr></thead><tbody><tr><td align="center">生命周期</td><td align="left">仅当前查询</td><td align="left">会话结束或显式删除</td></tr><tr><td align="center">可见性</td><td align="left">仅当前查询</td><td align="left">会话中的所有查询</td></tr><tr><td align="center">索引</td><td align="left">不能直接创建索引</td><td align="left">可以创建索引</td></tr><tr><td align="center">存储</td><td align="left">通常内存中</td><td align="left">可以存储在磁盘</td></tr></tbody></table><h2 id="十、实际案例：员工层级与路径查询"><a href="#十、实际案例：员工层级与路径查询" class="headerlink" title="十、实际案例：员工层级与路径查询"></a>十、实际案例：员工层级与路径查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> <span class="keyword">RECURSIVE</span> emp_path <span class="keyword">AS</span> (</span><br><span class="line">    <span class="comment">-- 基础查询：顶级管理者</span></span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        id,</span><br><span class="line">        name,</span><br><span class="line">        manager_id,</span><br><span class="line">        name <span class="keyword">AS</span> path</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">WHERE</span> manager_id <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">-- 递归查询：下属员工</span></span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        e.id,</span><br><span class="line">        e.name,</span><br><span class="line">        e.manager_id,</span><br><span class="line">        CONCAT(ep.path, <span class="string">&#x27; &gt; &#x27;</span>, e.name) <span class="keyword">AS</span> path</span><br><span class="line">    <span class="keyword">FROM</span> employees e</span><br><span class="line">    <span class="keyword">JOIN</span> emp_path ep <span class="keyword">ON</span> e.manager_id <span class="operator">=</span> ep.id</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp_path <span class="keyword">ORDER</span> <span class="keyword">BY</span> path;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dockerfile-learning</title>
      <link href="/2025/06/10/dockerfile-learning/"/>
      <url>/2025/06/10/dockerfile-learning/</url>
      
        <content type="html"><![CDATA[<h1 id="Dockerfile-完全指南：所有指令语法详解及实战示例"><a href="#Dockerfile-完全指南：所有指令语法详解及实战示例" class="headerlink" title="Dockerfile 完全指南：所有指令语法详解及实战示例"></a>Dockerfile 完全指南：所有指令语法详解及实战示例</h1><h2 id="一、Dockerfile-指令全集"><a href="#一、Dockerfile-指令全集" class="headerlink" title="一、Dockerfile 指令全集"></a>一、Dockerfile 指令全集</h2><h3 id="1-FROM"><a href="#1-FROM" class="headerlink" title="1. FROM"></a>1. FROM</h3><p>语法：FROM [–platform&#x3D;<platform>] <image>[:<tag>] [AS <name>]<br>说明：设置基础镜像，必须是第一条有效指令（ARG除外）<br>示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">20.04</span></span><br><span class="line"><span class="comment"># 多阶段构建时命名阶段</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.9</span> AS builder</span><br><span class="line"><span class="comment"># 指定平台</span></span><br><span class="line"><span class="keyword">FROM</span> --platform=linux/amd64 node:<span class="number">16</span></span><br></pre></td></tr></table></figure><h3 id="2-RUN"><a href="#2-RUN" class="headerlink" title="2. RUN"></a>2. RUN</h3><p>语法：</p><p>Shell格式：RUN <command></p><p>Exec格式：RUN [“executable”, “param1”, “param2”]<br>说明：执行命令并创建新的镜像层<br>示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y \</span></span><br><span class="line"><span class="language-bash">    curl \</span></span><br><span class="line"><span class="language-bash">    git \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">rm</span> -rf /var/lib/apt/lists/*</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> [<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo hello&quot;</span>]</span></span><br></pre></td></tr></table></figure><h3 id="3-CMD"><a href="#3-CMD" class="headerlink" title="3. CMD"></a>3. CMD</h3><p>语法：</p><p>Exec格式（推荐）：CMD [“executable”,”param1”,”param2”]</p><p>Shell格式：CMD command param1 param2</p><p>作为ENTRYPOINT参数：CMD [“param1”,”param2”]<br>说明：设置容器启动时默认执行的命令<br>示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;app.py&quot;</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;<span class="variable">$HOME</span>/run.sh&quot;</span>]  <span class="comment"># 变量不会展开</span></span></span><br></pre></td></tr></table></figure><h3 id="4-LABEL"><a href="#4-LABEL" class="headerlink" title="4. LABEL"></a>4. LABEL</h3><p>语法：LABEL <key>&#x3D;<value> <key>&#x3D;<value> …<br>说明：添加元数据到镜像<br>示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> version=<span class="string">&quot;1.0&quot;</span></span></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> maintainer=<span class="string">&quot;dev@example.com&quot;</span></span></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> description=<span class="string">&quot;This is a \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">multi-line description&quot;</span></span></span><br></pre></td></tr></table></figure><h3 id="5-EXPOSE"><a href="#5-EXPOSE" class="headerlink" title="5. EXPOSE"></a>5. EXPOSE</h3><p>语法：EXPOSE <port> [<port>&#x2F;<protocol>…]<br>说明：声明容器运行时监听的端口<br>示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span>/tcp</span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">443</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">3000</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure><h3 id="6-ENV"><a href="#6-ENV" class="headerlink" title="6. ENV"></a>6. ENV</h3><p>语法：</p><p>ENV <key>&#x3D;<value> …</p><p>ENV <key> <value>（不推荐）<br>说明：设置环境变量<br>示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> NODE_ENV=production</span><br><span class="line"><span class="keyword">ENV</span> APP_HOME=/usr/src/app \</span><br><span class="line">    PATH=/usr/local/bin:$PATH</span><br></pre></td></tr></table></figure><h3 id="7-ADD"><a href="#7-ADD" class="headerlink" title="7. ADD"></a>7. ADD</h3><p>语法：ADD [–chown&#x3D;<user>:<group>] <src>… <dest><br>说明：复制文件&#x2F;目录&#x2F;URL到镜像，支持自动解压<br>高级特性：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ADD</span><span class="language-bash"> --<span class="built_in">chown</span>=1000:1000 file.txt /app/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> https://example.com/file.tar.gz /tmp/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> hom* /mydir/  <span class="comment"># 通配符添加</span></span></span><br></pre></td></tr></table></figure><h3 id="8-COPY"><a href="#8-COPY" class="headerlink" title="8. COPY"></a>8. COPY</h3><p>语法：COPY [–chown&#x3D;<user>:<group>] <src>… <dest><br>说明：复制本地文件到镜像（推荐优先使用）<br>与ADD区别：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --<span class="built_in">chown</span>=node:node package*.json ./</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./src /app/src</span></span><br></pre></td></tr></table></figure><h3 id="9-ENTRYPOINT"><a href="#9-ENTRYPOINT" class="headerlink" title="9. ENTRYPOINT"></a>9. ENTRYPOINT</h3><p>语法：</p><p>Exec格式：ENTRYPOINT [“executable”, “param1”, “param2”]</p><p>Shell格式：ENTRYPOINT command param1 param2<br>说明：配置容器启动时运行的命令<br>与CMD组合：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;top&quot;</span>, <span class="string">&quot;-b&quot;</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;-c&quot;</span>]</span></span><br></pre></td></tr></table></figure><h3 id="10-VOLUME"><a href="#10-VOLUME" class="headerlink" title="10. VOLUME"></a>10. VOLUME</h3><p>语法：VOLUME [“&#x2F;data”]<br>说明：创建挂载点并标记为外部挂载卷<br>重要特性：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> /var/log</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> [<span class="string">&quot;/data1&quot;</span>, <span class="string">&quot;/data2&quot;</span>]</span></span><br></pre></td></tr></table></figure><h1 id="运行时自动创建匿名卷"><a href="#运行时自动创建匿名卷" class="headerlink" title="运行时自动创建匿名卷"></a>运行时自动创建匿名卷</h1><h3 id="11-USER"><a href="#11-USER" class="headerlink" title="11. USER"></a>11. USER</h3><p>语法：USER <user>[:<group>]<br>说明：设置运行用户<br>示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USER</span> nobody</span><br><span class="line"><span class="keyword">USER</span> <span class="number">1000</span>:<span class="number">1000</span></span><br></pre></td></tr></table></figure><h3 id="12-WORKDIR"><a href="#12-WORKDIR" class="headerlink" title="12. WORKDIR"></a>12. WORKDIR</h3><p>语法：WORKDIR &#x2F;path&#x2F;to&#x2F;workdir<br>说明：设置工作目录<br>特点：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> src</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">pwd</span>  <span class="comment"># 输出/app/src</span></span></span><br></pre></td></tr></table></figure><h3 id="13-ARG"><a href="#13-ARG" class="headerlink" title="13. ARG"></a>13. ARG</h3><p>语法：ARG <name>[&#x3D;<default value>]<br>说明：定义构建时的变量<br>使用场景：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ARG</span> APP_VERSION=latest</span><br><span class="line"><span class="keyword">FROM</span> nginx:$APP_VERSION</span><br></pre></td></tr></table></figure><h1 id="构建时：docker-build-–build-arg-APP-VERSION-1-21"><a href="#构建时：docker-build-–build-arg-APP-VERSION-1-21" class="headerlink" title="构建时：docker build –build-arg APP_VERSION&#x3D;1.21"></a>构建时：docker build –build-arg APP_VERSION&#x3D;1.21</h1><h3 id="14-ONBUILD"><a href="#14-ONBUILD" class="headerlink" title="14. ONBUILD"></a>14. ONBUILD</h3><p>语法：ONBUILD <INSTRUCTION><br>说明：设置镜像被用作基础镜像时执行的指令<br>示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ONBUILD</span> <span class="keyword">COPY</span><span class="language-bash"> . /app/src</span></span><br><span class="line"><span class="keyword">ONBUILD</span> <span class="keyword">RUN</span><span class="language-bash"> make /app/src</span></span><br></pre></td></tr></table></figure><h3 id="15-STOPSIGNAL"><a href="#15-STOPSIGNAL" class="headerlink" title="15. STOPSIGNAL"></a>15. STOPSIGNAL</h3><p>语法：STOPSIGNAL signal<br>说明：设置停止容器的系统信号<br>示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">STOPSIGNAL</span> SIGTERM</span><br></pre></td></tr></table></figure><h3 id="16-HEALTHCHECK"><a href="#16-HEALTHCHECK" class="headerlink" title="16. HEALTHCHECK"></a>16. HEALTHCHECK</h3><p>语法：</p><p>HEALTHCHECK [OPTIONS] CMD command</p><p>HEALTHCHECK NONE<br>选项：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">HEALTHCHECK</span><span class="language-bash"> --interval=5m --<span class="built_in">timeout</span>=3s \</span></span><br><span class="line"><span class="language-bash">  CMD curl -f http://localhost/ || <span class="built_in">exit</span> 1</span></span><br></pre></td></tr></table></figure><h3 id="17-SHELL"><a href="#17-SHELL" class="headerlink" title="17. SHELL"></a>17. SHELL</h3><p>语法：SHELL [“executable”, “parameters”]<br>说明：覆盖默认的shell<br>示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHELL</span><span class="language-bash"> [<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> hello</span></span><br></pre></td></tr></table></figure><h2 id="二、VOLUME-指令深入解析"><a href="#二、VOLUME-指令深入解析" class="headerlink" title="二、VOLUME 指令深入解析"></a>二、VOLUME 指令深入解析</h2><h3 id="1-基本用法"><a href="#1-基本用法" class="headerlink" title="1. 基本用法"></a>1. 基本用法</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> [<span class="string">&quot;/data&quot;</span>]</span></span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> /data</span></span><br></pre></td></tr></table></figure><h3 id="2-多卷声明"><a href="#2-多卷声明" class="headerlink" title="2. 多卷声明"></a>2. 多卷声明</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> [<span class="string">&quot;/var/log&quot;</span>, <span class="string">&quot;/var/db&quot;</span>]</span></span><br></pre></td></tr></table></figure><h3 id="3-运行时行为"><a href="#3-运行时行为" class="headerlink" title="3. 运行时行为"></a>3. 运行时行为</h3><p>自动创建匿名卷</p><p>数据会持久化但难以管理（推荐显式挂载）</p><h3 id="4-最佳实践"><a href="#4-最佳实践" class="headerlink" title="4. 最佳实践"></a>4. 最佳实践</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 在Dockerfile中声明</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> /data</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 运行时绑定挂载（推荐）</span></span><br><span class="line"><span class="comment"># docker run -v /host/path:/container/path</span></span><br></pre></td></tr></table></figure><h2 id="三、多阶段构建完整示例"><a href="#三、多阶段构建完整示例" class="headerlink" title="三、多阶段构建完整示例"></a>三、多阶段构建完整示例</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一阶段：构建应用</span></span><br><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.18</span> AS builder</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> go.mod go.sum ./</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> go mod download</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> CGO_ENABLED=0 GOOS=linux go build -o /app/bin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二阶段：运行环境</span></span><br><span class="line"><span class="keyword">FROM</span> alpine:latest</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /root/</span></span><br><span class="line"><span class="comment"># 从builder阶段复制二进制文件</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder /app/bin /usr/local/bin/</span></span><br><span class="line"><span class="comment"># 声明数据卷</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> /data</span></span><br><span class="line"><span class="comment"># 设置健康检查</span></span><br><span class="line"><span class="keyword">HEALTHCHECK</span><span class="language-bash"> --interval=30s --<span class="built_in">timeout</span>=3s \</span></span><br><span class="line"><span class="language-bash">  CMD pgrep app || <span class="built_in">exit</span> 1</span></span><br><span class="line"><span class="comment"># 设置非root用户</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> adduser -D appuser &amp;&amp; <span class="built_in">chown</span> -R appuser /data</span></span><br><span class="line"><span class="keyword">USER</span> appuser</span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;/usr/local/bin/app&quot;</span>]</span></span><br></pre></td></tr></table></figure><h2 id="四、高级特性实战"><a href="#四、高级特性实战" class="headerlink" title="四、高级特性实战"></a>四、高级特性实战</h2><h3 id="1-构建时变量与运行时变量"><a href="#1-构建时变量与运行时变量" class="headerlink" title="1. 构建时变量与运行时变量"></a>1. 构建时变量与运行时变量</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ARG</span> BUILD_VERSION</span><br><span class="line"><span class="keyword">ENV</span> APP_VERSION=$&#123;BUILD_VERSION:-<span class="number">1.0</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="2-缓存优化"><a href="#2-缓存优化" class="headerlink" title="2. 缓存优化"></a>2. 缓存优化</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先复制依赖文件，利用缓存层</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> package.json yarn.lock ./</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yarn install</span></span><br><span class="line"><span class="comment"># 再复制源代码</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br></pre></td></tr></table></figure><h3 id="3-安全加固"><a href="#3-安全加固" class="headerlink" title="3. 安全加固"></a>3. 安全加固</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> adduser -D myuser &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">chown</span> -R myuser /app</span></span><br><span class="line"><span class="keyword">USER</span> myuser</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁止root登录</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">rm</span> -f /etc/passwd /etc/shadow</span></span><br></pre></td></tr></table></figure><h2 id="五、-dockerignore-文件"><a href="#五、-dockerignore-文件" class="headerlink" title="五、.dockerignore 文件"></a>五、.dockerignore 文件</h2><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 忽略所有.md文件</span><br><span class="line">*.md</span><br><span class="line"># 除README.md外的md文件</span><br><span class="line">!README.md</span><br><span class="line"># 忽略目录</span><br><span class="line">node_modules/</span><br><span class="line">.git/</span><br><span class="line"># 忽略Dockerfile和.dockerignore本身</span><br><span class="line">Dockerfile</span><br><span class="line">.dockerignore</span><br></pre></td></tr></table></figure><h2 id="六、构建上下文优化"><a href="#六、构建上下文优化" class="headerlink" title="六、构建上下文优化"></a>六、构建上下文优化</h2><p>最小化上下文：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建专用目录</span></span><br><span class="line"><span class="built_in">mkdir</span> docker-context &amp;&amp; <span class="built_in">cd</span> docker-context</span><br><span class="line"><span class="comment"># 只复制必要文件</span></span><br><span class="line"><span class="built_in">cp</span> -r ../src ./ &amp;&amp; <span class="built_in">cp</span> ../package.json .</span><br><span class="line"><span class="comment"># 构建</span></span><br><span class="line">docker build -t myapp .</span><br></pre></td></tr></table></figure><p>使用远程URL：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ADD</span><span class="language-bash"> https://example.com/file.tar.gz /tmp/</span></span><br></pre></td></tr></table></figure><h2 id="七、完整企业级示例"><a href="#七、完整企业级示例" class="headerlink" title="七、完整企业级示例"></a>七、完整企业级示例</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># syntax=docker/dockerfile:1.4</span></span><br><span class="line"><span class="keyword">ARG</span> PYTHON_VERSION=<span class="number">3.9</span></span><br><span class="line"><span class="keyword">FROM</span> python:$&#123;PYTHON_VERSION&#125;-slim as base</span><br><span class="line"></span><br><span class="line"><span class="comment"># 元数据</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> org.opencontainers.image.authors=<span class="string">&quot;team@example.com&quot;</span></span></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> org.opencontainers.image.version=<span class="string">&quot;1.2.3&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统设置</span></span><br><span class="line"><span class="keyword">ENV</span> PYTHONUNBUFFERED=<span class="number">1</span> \</span><br><span class="line">    PYTHONDONTWRITEBYTECODE=<span class="number">1</span> \</span><br><span class="line">    PIP_NO_CACHE_DIR=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装系统依赖</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y --no-install-recommends \</span></span><br><span class="line"><span class="language-bash">    build-essential \</span></span><br><span class="line"><span class="language-bash">    libpq-dev \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">rm</span> -rf /var/lib/apt/lists/*</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Python依赖</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> requirements.txt .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install --user -r requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制应用代码</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据卷</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> /app/data</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> /app/logs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 非root用户</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> useradd -m appuser &amp;&amp; <span class="built_in">chown</span> -R appuser /app</span></span><br><span class="line"><span class="keyword">USER</span> appuser</span><br><span class="line"></span><br><span class="line"><span class="comment"># 健康检查</span></span><br><span class="line"><span class="keyword">HEALTHCHECK</span><span class="language-bash"> --interval=30s --<span class="built_in">timeout</span>=5s \</span></span><br><span class="line"><span class="language-bash">  CMD curl -f http://localhost:8000/health || <span class="built_in">exit</span> 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动命令</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;python&quot;</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;manage.py&quot;</span>, <span class="string">&quot;runserver&quot;</span>, <span class="string">&quot;0.0.0.0:8000&quot;</span>]</span></span><br></pre></td></tr></table></figure><h2 id="八、常见问题解决方案"><a href="#八、常见问题解决方案" class="headerlink" title="八、常见问题解决方案"></a>八、常见问题解决方案</h2><h3 id="1-权限问题"><a href="#1-权限问题" class="headerlink" title="1. 权限问题"></a>1. 权限问题</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> -p /data &amp;&amp; <span class="built_in">chown</span> -R 1000:1000 /data</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> /data</span></span><br><span class="line"><span class="keyword">USER</span> <span class="number">1000</span></span><br></pre></td></tr></table></figure><h3 id="2-时区设置"><a href="#2-时区设置" class="headerlink" title="2. 时区设置"></a>2. 时区设置</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span></span><br></pre></td></tr></table></figure><h3 id="3-清理缓存"><a href="#3-清理缓存" class="headerlink" title="3. 清理缓存"></a>3. 清理缓存</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y \</span></span><br><span class="line"><span class="language-bash">    package1 \</span></span><br><span class="line"><span class="language-bash">    package2 \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">rm</span> -rf /var/lib/apt/lists/*</span></span><br></pre></td></tr></table></figure><h2 id="九、性能优化技巧"><a href="#九、性能优化技巧" class="headerlink" title="九、性能优化技巧"></a>九、性能优化技巧</h2><p>构建缓存：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 变化频率低的指令放前面</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> package.json .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm install</span></span><br><span class="line"><span class="comment"># 变化频率高的放后面</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br></pre></td></tr></table></figure><p>多阶段构建：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">16</span> as build</span><br><span class="line"><span class="comment"># ...构建步骤</span></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">16</span>-alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=build /app/dist /app</span></span><br><span class="line">使用.dockerignore：</span><br><span class="line"></span><br><span class="line">text</span><br><span class="line">.git/</span><br><span class="line">node_modules/</span><br><span class="line">*.log</span><br></pre></td></tr></table></figure><h2 id="十、安全最佳实践"><a href="#十、安全最佳实践" class="headerlink" title="十、安全最佳实践"></a>十、安全最佳实践</h2><p>最小权限原则：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> adduser --disabled-password appuser</span></span><br><span class="line"><span class="keyword">USER</span> appuser</span><br><span class="line">定期更新基础镜像：</span><br><span class="line"></span><br><span class="line">dockerfile</span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">20.04</span>  <span class="comment"># 定期检查更新</span></span><br></pre></td></tr></table></figure><p>不存储敏感数据：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 错误做法</span></span><br><span class="line"><span class="keyword">ENV</span> DB_PASSWORD=secret</span><br><span class="line"><span class="comment"># 正确做法：运行时通过环境变量传入</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-componse-learning</title>
      <link href="/2025/06/10/docker-componse-learning/"/>
      <url>/2025/06/10/docker-componse-learning/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-Compose-语法与使用指南"><a href="#Docker-Compose-语法与使用指南" class="headerlink" title="Docker Compose 语法与使用指南"></a>Docker Compose 语法与使用指南</h1><h2 id="一、Docker-Compose-简介"><a href="#一、Docker-Compose-简介" class="headerlink" title="一、Docker Compose 简介"></a>一、Docker Compose 简介</h2><p>Docker Compose 是一个用于定义和运行多容器 Docker 应用程序的工具。通过 docker-compose.yml 配置文件，你可以声明应用程序的服务、网络和卷，然后使用一个命令启动并管理整个应用栈，极大提高了开发、测试和部署效率。</p><h2 id="二、核心语法"><a href="#二、核心语法" class="headerlink" title="二、核心语法"></a>二、核心语法</h2><ol><li>配置文件结构<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Docker</span> <span class="string">Compose</span> <span class="string">的配置文件（docker-compose.yml）采用</span> <span class="string">YAML</span> <span class="string">格式，核心结构由</span> <span class="string">version、services、networks、volumes</span> <span class="string">四部分组成：</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span>  <span class="comment"># 版本号，推荐使用3.x，兼容大多数场景</span></span><br><span class="line"><span class="attr">services:</span>  <span class="comment"># 定义服务（容器）</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:latest</span>  <span class="comment"># 镜像名称</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span>  <span class="comment"># 端口映射</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="string">-./html:/usr/share/nginx/html</span>  <span class="comment"># 卷挂载</span></span><br><span class="line"><span class="attr">networks:</span>  <span class="comment"># 定义网络</span></span><br><span class="line">  <span class="attr">my-network:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span>  <span class="comment"># 网络驱动</span></span><br><span class="line"><span class="attr">volumes:</span>  <span class="comment"># 定义卷</span></span><br><span class="line">  <span class="attr">my-volume:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span>  <span class="comment"># 卷驱动</span></span><br></pre></td></tr></table></figure></li><li>services 配置详解<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">image：指定容器使用的镜像（支持仓库名、标签或完整镜像地址）。</span></span><br><span class="line"><span class="string">build：指定构建镜像的上下文路径或</span> <span class="string">Dockerfile</span> <span class="string">路径（适用于自定义镜像）。</span></span><br><span class="line"><span class="attr">app:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="string">context:.</span></span><br><span class="line">    <span class="attr">dockerfile:</span> <span class="string">Dockerfile.development</span></span><br><span class="line"></span><br><span class="line"><span class="string">ports：定义容器端口与宿主机端口的映射，支持</span> <span class="string">宿主机端口:容器端口</span> <span class="string">格式。</span></span><br><span class="line"><span class="string">volumes：配置数据卷挂载，支持本地路径挂载或命名卷挂载。</span></span><br><span class="line"><span class="string">本地路径挂载：./data:/app/data</span></span><br><span class="line"><span class="string">命名卷挂载：my-volume:/app/data</span></span><br><span class="line"><span class="string">environment：设置容器环境变量，可以是键值对或从文件加载。</span></span><br><span class="line"><span class="attr">db:</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=secret</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=test</span></span><br><span class="line"></span><br><span class="line"><span class="string">depends_on：定义服务间的依赖关系，确保容器按顺序启动（但不保证服务完全就绪）。</span></span><br><span class="line"><span class="attr">web:</span></span><br><span class="line">  <span class="attr">depends_on:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">db</span></span><br></pre></td></tr></table></figure></li><li>networks 与 volumes<br>networks：自定义网络，容器可通过服务名称直接通信（例如 web 容器可通过 db 访问 db 服务）。<br>volumes：定义命名卷，便于跨服务共享数据，或实现数据持久化。</li></ol><h2 id="三、常用命令"><a href="#三、常用命令" class="headerlink" title="三、常用命令"></a>三、常用命令</h2><p>命令<br>说明<br>docker-compose up<br>启动所有服务，默认前台运行；加 -d 参数则后台运行。<br>docker-compose down<br>停止并删除容器、网络和卷（默认不删除命名卷）。<br>docker-compose start&#x2F;stop<br>启动 &#x2F; 停止指定服务。<br>docker-compose ps<br>查看当前运行的容器。<br>docker-compose exec <service> <command><br>在运行的容器中执行命令（例如 docker-compose exec web bash）。<br>docker-compose logs<br>查看服务日志。</p><h2 id="四、使用示例"><a href="#四、使用示例" class="headerlink" title="四、使用示例"></a>四、使用示例</h2><ol><li>部署 WordPress + MySQL 应用<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">wordpress:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wordpress:latest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:80&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WORDPRESS_DB_HOST=db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WORDPRESS_DB_USER=root</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WORDPRESS_DB_PASSWORD=secret</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:latest</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=secret</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=wordpress</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db_data:/var/lib/mysql</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">db_data:</span></span><br></pre></td></tr></table></figure>执行 docker-compose up -d 后，即可通过 <a href="http://localhost:8080/">http://localhost:8080</a> 访问 WordPress 站点。</li><li>开发环境多服务协作<br>假设项目包含后端（Node.js）、前端（React）和数据库（PostgreSQL）：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">backend:</span></span><br><span class="line">    <span class="string">build:./backend</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3000:3000&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="string">-./backend:/app</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DATABASE_URL=postgresql://user:password@db/mydb</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">  <span class="attr">frontend:</span></span><br><span class="line">    <span class="string">build:./frontend</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5000:3000&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="string">-./frontend:/app</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">backend</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:latest</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_USER=user</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_PASSWORD=password</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_DB=mydb</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pg_data:/var/lib/postgresql/data</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">pg_data:</span></span><br></pre></td></tr></table></figure>开发时，修改代码后容器会自动重新加载，无需手动重启。</li></ol><h2 id="五、注意事项"><a href="#五、注意事项" class="headerlink" title="五、注意事项"></a>五、注意事项</h2><p>版本兼容性：确保 Docker Compose 版本与 Docker 引擎版本匹配，避免配置不兼容问题。<br>网络通信：使用自定义网络时，容器间通过服务名称解析 IP，无需手动配置 IP 地址。<br>数据持久化：命名卷可确保容器删除后数据不丢失，适合生产环境。<br>资源限制：通过 deploy.resources 配置（适用于 Swarm 模式）或 –cpus、–memory 参数限制容器资源使用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>look-flow</title>
      <link href="/2025/06/07/look-flow/"/>
      <url>/2025/06/07/look-flow/</url>
      
        <content type="html"><![CDATA[<h1 id="使用vnstat监控ubuntu流量"><a href="#使用vnstat监控ubuntu流量" class="headerlink" title="使用vnstat监控ubuntu流量"></a>使用vnstat监控ubuntu流量</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install vnstat</span><br><span class="line"><span class="built_in">sudo</span> vnstat -u -i wwan0  <span class="comment"># 初始化监控（对蜂窝网卡）</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl restart vnstat</span><br></pre></td></tr></table></figure><h2 id="2-查看本月消耗"><a href="#2-查看本月消耗" class="headerlink" title="2.查看本月消耗"></a>2.查看本月消耗</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vnstat -m</span><br></pre></td></tr></table></figure><h2 id="3-输出格式"><a href="#3-输出格式" class="headerlink" title="3.输出格式"></a>3.输出格式</h2><p> eth0  &#x2F;  monthly</p><pre><code>   month        rx      |     tx      |    total    |   avg. rate------------------------+-------------+-------------+---------------  Feb &#39;25     23.77 GiB |  509.25 MiB |   24.27 GiB |   86.18 kbit/s  Mar &#39;25       674 KiB |     225 KiB |     899 KiB |    0.00 kbit/s  Apr &#39;25    178.43 GiB |    3.67 GiB |  182.09 GiB |  603.46 kbit/s  May &#39;25    353.35 GiB |    7.32 GiB |  360.67 GiB |    1.16 Mbit/s  Jun &#39;25     50.02 GiB |    1.03 GiB |   51.06 GiB |    1.25 Mbit/s------------------------+-------------+-------------+---------------estimated    368.09 GiB |    7.59 GiB |  375.68 GiB |</code></pre><h2 id="4-按照指定网卡"><a href="#4-按照指定网卡" class="headerlink" title="4.按照指定网卡"></a>4.按照指定网卡</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vnstat -i wwan0 -m</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ts-code</title>
      <link href="/2025/06/07/ts-code/"/>
      <url>/2025/06/07/ts-code/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-语法大全与示例"><a href="#TypeScript-语法大全与示例" class="headerlink" title="TypeScript 语法大全与示例"></a>TypeScript 语法大全与示例</h1><h1 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h1><h2 id="1-原始类型"><a href="#1-原始类型" class="headerlink" title="1. 原始类型"></a>1. 原始类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">isDone</span>: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">count</span>: <span class="built_in">number</span> = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&quot;TypeScript&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模板字符串</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">sentence</span>: <span class="built_in">string</span> = <span class="string">`Hello, my name is <span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 空值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">unusable</span>: <span class="built_in">void</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">u</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">n</span>: <span class="literal">null</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h2 id="2-数组"><a href="#2-数组" class="headerlink" title="2. 数组"></a>2. 数组</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">list1</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">list2</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">// 泛型语法</span></span><br></pre></td></tr></table></figure><h2 id="3-元组-Tuple"><a href="#3-元组-Tuple" class="headerlink" title="3. 元组 (Tuple)"></a>3. 元组 (Tuple)</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">tuple</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">tuple = [<span class="string">&quot;hello&quot;</span>, <span class="number">10</span>]; <span class="comment">// OK</span></span><br><span class="line"><span class="comment">// tuple = [10, &quot;hello&quot;]; // Error</span></span><br></pre></td></tr></table></figure><h2 id="4-枚举-Enum"><a href="#4-枚举-Enum" class="headerlink" title="4. 枚举 (Enum)"></a>4. 枚举 (Enum)</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">  <span class="title class_">Red</span> = <span class="number">1</span>,</span><br><span class="line">  <span class="title class_">Green</span>,</span><br><span class="line">  <span class="title class_">Blue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="title class_">Color</span> = <span class="title class_">Color</span>.<span class="property">Green</span>; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h2 id="5-Any-和-Unknown"><a href="#5-Any-和-Unknown" class="headerlink" title="5. Any 和 Unknown"></a>5. Any 和 Unknown</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">notSure</span>: <span class="built_in">any</span> = <span class="number">4</span>;</span><br><span class="line">notSure = <span class="string">&quot;maybe a string instead&quot;</span>;</span><br><span class="line">notSure = <span class="literal">false</span>; <span class="comment">// okay, definitely a boolean</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">uncertain</span>: <span class="built_in">unknown</span> = <span class="number">4</span>;</span><br><span class="line">uncertain = <span class="string">&quot;could be anything&quot;</span>;</span><br><span class="line"><span class="comment">// let num: number = uncertain; // Error</span></span><br></pre></td></tr></table></figure><h2 id="6-Never"><a href="#6-Never" class="headerlink" title="6. Never"></a>6. Never</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">error</span>(<span class="params"><span class="attr">message</span>: <span class="built_in">string</span></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-类型断言"><a href="#7-类型断言" class="headerlink" title="7. 类型断言"></a>7. 类型断言</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">someValue</span>: <span class="built_in">any</span> = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">strLength1</span>: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;someValue).<span class="property">length</span>; <span class="comment">// 尖括号语法</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">strLength2</span>: <span class="built_in">number</span> = (someValue <span class="keyword">as</span> <span class="built_in">string</span>).<span class="property">length</span>; <span class="comment">// as语法</span></span><br></pre></td></tr></table></figure><h1 id="接口-Interface"><a href="#接口-Interface" class="headerlink" title="接口 (Interface)"></a>接口 (Interface)</h1><h2 id="1-基础接口"><a href="#1-基础接口" class="headerlink" title="1. 基础接口"></a>1. 基础接口</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>; <span class="comment">// 可选属性</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">id</span>: <span class="built_in">number</span>; <span class="comment">// 只读属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params"><span class="attr">person</span>: <span class="title class_">Person</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`Hello, <span class="subst">$&#123;person.name&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-函数类型"><a href="#2-函数类型" class="headerlink" title="2. 函数类型"></a>2. 函数类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">SearchFunc</span> &#123;</span><br><span class="line">  (<span class="attr">source</span>: <span class="built_in">string</span>, <span class="attr">subString</span>: <span class="built_in">string</span>): <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">mySearch</span>: <span class="title class_">SearchFunc</span> = <span class="keyword">function</span>(<span class="params">src, sub</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> src.<span class="title function_">search</span>(sub) &gt; -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="3-可索引类型"><a href="#3-可索引类型" class="headerlink" title="3. 可索引类型"></a>3. 可索引类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">StringArray</span> &#123;</span><br><span class="line">  [<span class="attr">index</span>: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myArray</span>: <span class="title class_">StringArray</span> = [<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Fred&quot;</span>];</span><br></pre></td></tr></table></figure><h2 id="4-类类型"><a href="#4-类类型" class="headerlink" title="4. 类类型"></a>4. 类类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ClockInterface</span> &#123;</span><br><span class="line">  <span class="attr">currentTime</span>: <span class="title class_">Date</span>;</span><br><span class="line">  <span class="title function_">setTime</span>(<span class="attr">d</span>: <span class="title class_">Date</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span> <span class="keyword">implements</span> <span class="title class_">ClockInterface</span> &#123;</span><br><span class="line">  <span class="attr">currentTime</span>: <span class="title class_">Date</span> = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">  <span class="title function_">setTime</span>(<span class="params"><span class="attr">d</span>: <span class="title class_">Date</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">currentTime</span> = d;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="类-Class"><a href="#类-Class" class="headerlink" title="类 (Class)"></a>类 (Class)</h1><h2 id="1-基础类"><a href="#1-基础类" class="headerlink" title="1. 基础类"></a>1. 基础类</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">name</span>: <span class="built_in">string</span>; <span class="comment">// 私有属性</span></span><br><span class="line">  </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">move</span>(<span class="params"><span class="attr">distance</span>: <span class="built_in">number</span> = <span class="number">0</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> moved <span class="subst">$&#123;distance&#125;</span>m`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-继承"><a href="#2-继承" class="headerlink" title="2. 继承"></a>2. 继承</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">bark</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Woof! Woof!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;Buddy&quot;</span>);</span><br><span class="line">dog.<span class="title function_">bark</span>();</span><br><span class="line">dog.<span class="title function_">move</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><h2 id="3-存取器-getter-setter"><a href="#3-存取器-getter-setter" class="headerlink" title="3. 存取器 (getter&#x2F;setter)"></a>3. 存取器 (getter&#x2F;setter)</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_fullName</span>: <span class="built_in">string</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">fullName</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_fullName</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">fullName</span>(<span class="params"><span class="attr">newName</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_fullName</span> = newName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-静态属性"><a href="#4-静态属性" class="headerlink" title="4. 静态属性"></a>4. 静态属性</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Grid</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> origin = &#123;<span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span>&#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> <span class="attr">scale</span>: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">calculateDistance</span>(<span class="params"><span class="attr">point</span>: &#123;x: <span class="built_in">number</span>; y: <span class="built_in">number</span>&#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> xDist = point.<span class="property">x</span> - <span class="title class_">Grid</span>.<span class="property">origin</span>.<span class="property">x</span>;</span><br><span class="line">    <span class="keyword">let</span> yDist = point.<span class="property">y</span> - <span class="title class_">Grid</span>.<span class="property">origin</span>.<span class="property">y</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(xDist * xDist + yDist * yDist) * <span class="variable language_">this</span>.<span class="property">scale</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-抽象类"><a href="#5-抽象类" class="headerlink" title="5. 抽象类"></a>5. 抽象类</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Department</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">abstract</span> <span class="title function_">printMeeting</span>(): <span class="built_in">void</span>; <span class="comment">// 必须在派生类中实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AccountingDepartment</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Department</span> &#123;</span><br><span class="line">  <span class="title function_">printMeeting</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Accounting Department Meeting&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="1-函数类型"><a href="#1-函数类型" class="headerlink" title="1. 函数类型"></a>1. 函数类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"><span class="attr">x</span>: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myAdd</span>: <span class="function">(<span class="params"><span class="attr">x</span>: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="keyword">function</span>(<span class="params">x, y</span>) &#123; <span class="keyword">return</span> x + y; &#125;;</span><br></pre></td></tr></table></figure><h2 id="2-可选参数和默认参数"><a href="#2-可选参数和默认参数" class="headerlink" title="2. 可选参数和默认参数"></a>2. 可选参数和默认参数</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">buildName</span>(<span class="params"><span class="attr">firstName</span>: <span class="built_in">string</span>, lastName?: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> firstName + (lastName ? <span class="string">&quot; &quot;</span> + lastName : <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">buildName2</span>(<span class="params"><span class="attr">firstName</span>: <span class="built_in">string</span>, lastName = <span class="string">&quot;Smith&quot;</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> firstName + <span class="string">&quot; &quot;</span> + lastName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-剩余参数"><a href="#3-剩余参数" class="headerlink" title="3. 剩余参数"></a>3. 剩余参数</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">buildName3</span>(<span class="params"><span class="attr">firstName</span>: <span class="built_in">string</span>, ...<span class="attr">restOfName</span>: <span class="built_in">string</span>[]</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> firstName + <span class="string">&quot; &quot;</span> + restOfName.<span class="title function_">join</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-函数重载"><a href="#4-函数重载" class="headerlink" title="4. 函数重载"></a>4. 函数重载</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">pickCard</span>(<span class="params"><span class="attr">x</span>: &#123;suit: <span class="built_in">string</span>; card: <span class="built_in">number</span>&#125;[]</span>): <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">pickCard</span>(<span class="params"><span class="attr">x</span>: <span class="built_in">number</span></span>): &#123;<span class="attr">suit</span>: <span class="built_in">string</span>; <span class="attr">card</span>: <span class="built_in">number</span>&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">pickCard</span>(<span class="params"><span class="attr">x</span>: <span class="built_in">any</span></span>): <span class="built_in">any</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> x == <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * x.<span class="property">length</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x == <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">suit</span>: <span class="string">&quot;hearts&quot;</span>, <span class="attr">card</span>: x % <span class="number">13</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h2 id="1-基础泛型"><a href="#1-基础泛型" class="headerlink" title="1. 基础泛型"></a>1. 基础泛型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> output = identity&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;myString&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="2-泛型接口"><a href="#2-泛型接口" class="headerlink" title="2. 泛型接口"></a>2. 泛型接口</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">GenericIdentityFn</span>&lt;T&gt; &#123;</span><br><span class="line">  (<span class="attr">arg</span>: T): T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myIdentity</span>: <span class="title class_">GenericIdentityFn</span>&lt;<span class="built_in">number</span>&gt; = identity;</span><br></pre></td></tr></table></figure><h2 id="3-泛型类"><a href="#3-泛型类" class="headerlink" title="3. 泛型类"></a>3. 泛型类</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GenericNumber</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">zeroValue</span>: T;</span><br><span class="line">  <span class="attr">add</span>: <span class="function">(<span class="params"><span class="attr">x</span>: T, <span class="attr">y</span>: T</span>) =&gt;</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myGenericNumber = <span class="keyword">new</span> <span class="title class_">GenericNumber</span>&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line">myGenericNumber.<span class="property">zeroValue</span> = <span class="number">0</span>;</span><br><span class="line">myGenericNumber.<span class="property">add</span> = <span class="keyword">function</span>(<span class="params">x, y</span>) &#123; <span class="keyword">return</span> x + y; &#125;;</span><br></pre></td></tr></table></figure><h2 id="4-泛型约束"><a href="#4-泛型约束" class="headerlink" title="4. 泛型约束"></a>4. 泛型约束</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Lengthwise</span> &#123;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> loggingIdentity&lt;T <span class="keyword">extends</span> <span class="title class_">Lengthwise</span>&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>);</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="高级类型"><a href="#高级类型" class="headerlink" title="高级类型"></a>高级类型</h1><h2 id="1-交叉类型-Intersection-Types"><a href="#1-交叉类型-Intersection-Types" class="headerlink" title="1. 交叉类型 (Intersection Types)"></a>1. 交叉类型 (Intersection Types)</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Staff</span> = <span class="title class_">Person</span> &amp; <span class="title class_">Employee</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">staff</span>: <span class="title class_">Staff</span> = &#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>, <span class="attr">id</span>: <span class="number">123</span> &#125;;</span><br></pre></td></tr></table></figure><h2 id="2-联合类型-Union-Types"><a href="#2-联合类型-Union-Types" class="headerlink" title="2. 联合类型 (Union Types)"></a>2. 联合类型 (Union Types)</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">padLeft</span>(<span class="params"><span class="attr">value</span>: <span class="built_in">string</span>, <span class="attr">padding</span>: <span class="built_in">string</span> | <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Array</span>(padding + <span class="number">1</span>).<span class="title function_">join</span>(<span class="string">&quot; &quot;</span>) + value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> padding + value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-类型别名-Type-Aliases"><a href="#3-类型别名-Type-Aliases" class="headerlink" title="3. 类型别名 (Type Aliases)"></a>3. 类型别名 (Type Aliases)</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Name</span> = <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NameResolver</span> = <span class="function">() =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NameOrResolver</span> = <span class="title class_">Name</span> | <span class="title class_">NameResolver</span>;</span><br></pre></td></tr></table></figure><h2 id="4-字符串字面量类型"><a href="#4-字符串字面量类型" class="headerlink" title="4. 字符串字面量类型"></a>4. 字符串字面量类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Easing</span> = <span class="string">&quot;ease-in&quot;</span> | <span class="string">&quot;ease-out&quot;</span> | <span class="string">&quot;ease-in-out&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params"><span class="attr">dx</span>: <span class="built_in">number</span>, <span class="attr">easing</span>: <span class="title class_">Easing</span></span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-可辨识联合-Discriminated-Unions"><a href="#5-可辨识联合-Discriminated-Unions" class="headerlink" title="5. 可辨识联合 (Discriminated Unions)"></a>5. 可辨识联合 (Discriminated Unions)</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Square</span> &#123;</span><br><span class="line">  <span class="attr">kind</span>: <span class="string">&quot;square&quot;</span>;</span><br><span class="line">  <span class="attr">size</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">  <span class="attr">kind</span>: <span class="string">&quot;rectangle&quot;</span>;</span><br><span class="line">  <span class="attr">width</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">height</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Shape</span> = <span class="title class_">Square</span> | <span class="title class_">Rectangle</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">area</span>(<span class="params"><span class="attr">s</span>: <span class="title class_">Shape</span></span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (s.<span class="property">kind</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;square&quot;</span>: <span class="keyword">return</span> s.<span class="property">size</span> * s.<span class="property">size</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;rectangle&quot;</span>: <span class="keyword">return</span> s.<span class="property">width</span> * s.<span class="property">height</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><h2 id="1-导出"><a href="#1-导出" class="headerlink" title="1. 导出"></a>1. 导出</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// math.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"><span class="attr">x</span>: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure><h2 id="2-导入"><a href="#2-导入" class="headerlink" title="2. 导入"></a>2. 导入</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; add, <span class="variable constant_">PI</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./math&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">PI</span>); <span class="comment">// 3.14</span></span><br></pre></td></tr></table></figure><h2 id="3-默认导出"><a href="#3-默认导出" class="headerlink" title="3. 默认导出"></a>3. 默认导出</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// calculator.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.ts</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Calc</span> <span class="keyword">from</span> <span class="string">&quot;./calculator&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> calc = <span class="keyword">new</span> <span class="title class_">Calc</span>();</span><br></pre></td></tr></table></figure><h1 id="装饰器-Decorators"><a href="#装饰器-Decorators" class="headerlink" title="装饰器 (Decorators)"></a>装饰器 (Decorators)</h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sealed</span>(<span class="params"><span class="attr">constructor</span>: <span class="title class_">Function</span></span>) &#123;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">seal</span>(constructor);</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">seal</span>(constructor.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@sealed</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BugReport</span> &#123;</span><br><span class="line">  <span class="keyword">type</span> = <span class="string">&quot;report&quot;</span>;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="attr">t</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">title</span> = t;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实用工具类型"><a href="#实用工具类型" class="headerlink" title="实用工具类型"></a>实用工具类型</h1><h2 id="1-Partial"><a href="#1-Partial" class="headerlink" title="1. Partial"></a>1. Partial</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">description</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateTodo</span>(<span class="params"><span class="attr">todo</span>: <span class="title class_">Todo</span>, <span class="attr">fieldsToUpdate</span>: <span class="title class_">Partial</span>&lt;<span class="title class_">Todo</span>&gt;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; ...todo, ...fieldsToUpdate &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-Readonly"><a href="#2-Readonly" class="headerlink" title="2. Readonly"></a>2. Readonly</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">todo</span>: <span class="title class_">Readonly</span>&lt;<span class="title class_">Todo</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;Delete inactive users&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// todo.title = &quot;Hello&quot;; // Error</span></span><br></pre></td></tr></table></figure><h2 id="3-Record"><a href="#3-Record" class="headerlink" title="3. Record"></a>3. Record</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">PageInfo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Page</span> = <span class="string">&quot;home&quot;</span> | <span class="string">&quot;about&quot;</span> | <span class="string">&quot;contact&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">nav</span>: <span class="title class_">Record</span>&lt;<span class="title class_">Page</span>, <span class="title class_">PageInfo</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">home</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;Home&quot;</span> &#125;,</span><br><span class="line">  <span class="attr">about</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;About&quot;</span> &#125;,</span><br><span class="line">  <span class="attr">contact</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;Contact&quot;</span> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="4-Pick-和-Omit"><a href="#4-Pick-和-Omit" class="headerlink" title="4. Pick 和 Omit"></a>4. Pick 和 Omit</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">description</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">completed</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TodoPreview</span> = <span class="title class_">Pick</span>&lt;<span class="title class_">Todo</span>, <span class="string">&quot;title&quot;</span> | <span class="string">&quot;completed&quot;</span>&gt;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TodoInfo</span> = <span class="title class_">Omit</span>&lt;<span class="title class_">Todo</span>, <span class="string">&quot;completed&quot;</span>&gt;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xposed</title>
      <link href="/2025/06/02/xposed/"/>
      <url>/2025/06/02/xposed/</url>
      
        <content type="html"><![CDATA[<h1 id="Android手机端滴滴抢单外挂示例（技术研究用途）"><a href="#Android手机端滴滴抢单外挂示例（技术研究用途）" class="headerlink" title="Android手机端滴滴抢单外挂示例（技术研究用途）"></a>Android手机端滴滴抢单外挂示例（技术研究用途）</h1><p>以下是一个更接近真实场景的Android实现框架，展示外挂可能的核心模块（仅供学习安全防御技术，请勿用于非法用途）。</p><h2 id="1-基础框架（Android-Xposed）"><a href="#1-基础框架（Android-Xposed）" class="headerlink" title="1. 基础框架（Android + Xposed）"></a>1. 基础框架（Android + Xposed）</h2><p>外挂通常以Xposed模块或Magisk模块的形式存在，通过Hook滴滴司机APP的关键函数实现自动化。<br>示例代码（Xposed模块）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模块入口：Hook滴滴APP的订单处理逻辑</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DiDiGrabber</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookLoadPackage</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam lpparam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="keyword">if</span> (!lpparam.packageName.equals(<span class="string">&quot;com.didi.psnger&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// 只Hook滴滴司机端APP</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Hook订单推送方法</span></span><br><span class="line">        XposedHelpers.findAndHookMethod(</span><br><span class="line">            <span class="string">&quot;com.didi.order.OrderManager&quot;</span>,</span><br><span class="line">            lpparam.classLoader,</span><br><span class="line">            <span class="string">&quot;onNewOrder&quot;</span>,</span><br><span class="line">            Order.class,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                    <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> (Order) param.args[<span class="number">0</span>];</span><br><span class="line">                    <span class="keyword">if</span> (order.getPrice() &gt; <span class="number">50</span>) &#123; <span class="comment">// 只抢高价值订单</span></span><br><span class="line">                        <span class="comment">// 自动调用接单方法（绕过UI点击）</span></span><br><span class="line">                        XposedHelpers.callMethod(</span><br><span class="line">                            param.thisObject,</span><br><span class="line">                            <span class="string">&quot;acceptOrder&quot;</span>,</span><br><span class="line">                            order.getId()</span><br><span class="line">                        );</span><br><span class="line">                        Log.d(<span class="string">&quot;DiDiGrabber&quot;</span>, <span class="string">&quot;抢单成功: &quot;</span> + order.getId());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-关键功能实现"><a href="#2-关键功能实现" class="headerlink" title="2. 关键功能实现"></a>2. 关键功能实现</h2><p>(1) 位置欺骗（模拟GPS）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用Android MockLocationProvider模拟位置</span></span><br><span class="line"><span class="type">LocationManager</span> <span class="variable">lm</span> <span class="operator">=</span> (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);</span><br><span class="line">lm.addTestProvider(</span><br><span class="line">    LocationManager.GPS_PROVIDER,</span><br><span class="line">    <span class="literal">false</span>,  <span class="comment">// requiresNetwork</span></span><br><span class="line">    <span class="literal">false</span>,  <span class="comment">// requiresSatellite</span></span><br><span class="line">    <span class="literal">false</span>,  <span class="comment">// requiresCell</span></span><br><span class="line">    <span class="literal">false</span>,  <span class="comment">// hasMonetaryCost</span></span><br><span class="line">    <span class="literal">true</span>,   <span class="comment">// supportsAltitude</span></span><br><span class="line">    <span class="literal">true</span>,   <span class="comment">// supportsSpeed</span></span><br><span class="line">    <span class="literal">true</span>,   <span class="comment">// supportsBearing</span></span><br><span class="line">    android.location.Criteria.POWER_LOW,</span><br><span class="line">    android.location.Criteria.ACCURACY_FINE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置虚假位置（北京国贸附近）</span></span><br><span class="line"><span class="type">Location</span> <span class="variable">mockLocation</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Location</span>(LocationManager.GPS_PROVIDER);</span><br><span class="line">mockLocation.setLatitude(<span class="number">39.909</span>);</span><br><span class="line">mockLocation.setLongitude(<span class="number">116.45</span>);</span><br><span class="line">mockLocation.setAccuracy(<span class="number">5.0f</span>);</span><br><span class="line">mockLocation.setTime(System.currentTimeMillis());</span><br><span class="line">lm.setTestProviderLocation(LocationManager.GPS_PROVIDER, mockLocation);</span><br></pre></td></tr></table></figure><p>(2) 协议破解（拦截加密请求）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用Frida Hook网络请求（示例）</span></span><br><span class="line">Java.perform(function() &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">OkHttpClient</span> <span class="operator">=</span> Java.use(<span class="string">&quot;okhttp3.OkHttpClient&quot;</span>);</span><br><span class="line">    OkHttpClient.newCall.implementation = function(request) &#123;</span><br><span class="line">        <span class="keyword">if</span> (request.url().contains(<span class="string">&quot;api.didi.com/order&quot;</span>)) &#123;</span><br><span class="line">            console.log(<span class="string">&quot;拦截订单请求: &quot;</span> + request.url());</span><br><span class="line">            <span class="comment">// 修改请求参数（如强制接单）</span></span><br><span class="line">            <span class="type">var</span> <span class="variable">modifiedRequest</span> <span class="operator">=</span> request.newBuilder()</span><br><span class="line">                .addHeader(<span class="string">&quot;X-Cheat&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.newCall(modifiedRequest);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.newCall(request);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>(3) 自动化点击（无障碍服务）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- AndroidManifest.xml 声明无障碍服务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">service</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;.OrderGrabService&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:permission</span>=<span class="string">&quot;android.permission.BIND_ACCESSIBILITY_SERVICE&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.accessibilityservice.AccessibilityService&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;android.accessibilityservice&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:resource</span>=<span class="string">&quot;@xml/accessibility_config&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自动点击&quot;抢单&quot;按钮</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderGrabService</span> <span class="keyword">extends</span> <span class="title class_">AccessibilityService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAccessibilityEvent</span><span class="params">(AccessibilityEvent event)</span> &#123;</span><br><span class="line">        <span class="type">AccessibilityNodeInfo</span> <span class="variable">rootNode</span> <span class="operator">=</span> getRootInActiveWindow();</span><br><span class="line">        <span class="keyword">if</span> (rootNode == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查找&quot;抢单&quot;按钮</span></span><br><span class="line">        List&lt;AccessibilityNodeInfo&gt; nodes = rootNode.findAccessibilityNodeInfosByText(<span class="string">&quot;抢单&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (AccessibilityNodeInfo node : nodes) &#123;</span><br><span class="line">            node.performAction(AccessibilityNodeInfo.ACTION_CLICK);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-如何安装到手机？"><a href="#3-如何安装到手机？" class="headerlink" title="3. 如何安装到手机？"></a>3. 如何安装到手机？</h2><p>真实的外挂通常需要：</p><p>Root手机或安装Magisk（绕过签名校验）</p><p>Xposed Framework（Hook滴滴APP）</p><p>隐藏自身（对抗检测）：</p><p>修改包名&#x2F;PackageManager信息</p>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git-hexo</title>
      <link href="/2025/06/02/git-hexo/"/>
      <url>/2025/06/02/git-hexo/</url>
      
        <content type="html"><![CDATA[<p>Hexo 作为基于 Node.js 的静态博客框架，其性能优化有一些特定的方法。以下是针对 Hexo 博客加载速度慢的常见原因及优化方案：</p><h1 id="一、Hexo-自身配置优化"><a href="#一、Hexo-自身配置优化" class="headerlink" title="一、Hexo 自身配置优化"></a>一、Hexo 自身配置优化</h1><ol><li>启用静态资源压缩<br>Hexo 默认生成的文件未压缩，可通过插件优化：</li></ol><p>安装插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-neat --save  <span class="comment"># 压缩 HTML/CSS/JS</span></span><br><span class="line">npm install hexo-image-slim --save  <span class="comment"># 图片压缩</span></span><br></pre></td></tr></table></figure><p>配置 _config.yml：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-neat 配置</span></span><br><span class="line"></span><br><span class="line"><span class="attr">neat_enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">neat_html:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">neat_css:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;*.min.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">neat_js:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mangle:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">output:</span></span><br><span class="line">  <span class="attr">compress:</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;*.min.js&#x27;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>优化生成速度与文件体积<br>减少不必要的生成：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _config.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">skip_render:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*.pdf&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*.zip&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*.mp4&#x27;</span>  <span class="comment"># 跳过大型文件生成</span></span><br></pre></td></tr></table></figure>禁用未使用的功能：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭不需要的功能（如 RSS、sitemap）</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="二、主题与插件优化"><a href="#二、主题与插件优化" class="headerlink" title="二、主题与插件优化"></a>二、主题与插件优化</h1><ol><li>更换轻量级主题<br>部分 Hexo 主题（如 NexT、Butterfly）自带性能优化，可选择以下配置：</li></ol><p>启用 CDN：在主题配置中使用第三方 CDN 加载资源（如 Google Fonts、Font Awesome）。<br>关闭不必要的功能：如动画效果、评论系统的实时预览等。<br>2. 精简插件<br>移除未使用的插件，仅保留必要的功能：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-generator-feed  <span class="comment"># 如不需要 RSS</span></span><br><span class="line">npm uninstall hexo-generator-sitemap  <span class="comment"># 如不需要 sitemap</span></span><br></pre></td></tr></table></figure><h1 id="三、静态资源优化"><a href="#三、静态资源优化" class="headerlink" title="三、静态资源优化"></a>三、静态资源优化</h1><ol><li>图片处理<br>压缩图片：使用工具（如 ImageOptim、TinyPNG）手动压缩，或通过 hexo-image-slim 自动处理。<br>使用 WebP 格式：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _config.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">image_slim:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">img_dir:</span> <span class="string">images</span>  <span class="comment"># 图片目录</span></span><br><span class="line">  <span class="attr">convert_to_webp:</span> <span class="literal">true</span>  <span class="comment"># 转换为 WebP</span></span><br></pre></td></tr></table></figure>懒加载图片：添加插件 hexo-lazyload-image：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-lazyload-image --save</span><br></pre></td></tr></table></figure></li><li>CSS&#x2F;JS 优化<br>合并与压缩：使用 hexo-neat 自动合并和压缩 CSS&#x2F;JS 文件。<br>使用 CDN：将 jQuery、Bootstrap 等库替换为 CDN 链接，减少本地文件体积。</li></ol><h1 id="四、部署与缓存策略"><a href="#四、部署与缓存策略" class="headerlink" title="四、部署与缓存策略"></a>四、部署与缓存策略</h1><ol><li>增量部署<br>使用 hexo-deployer-git 时，仅推送变更的文件：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate --deploy  <span class="comment"># 生成并部署</span></span><br></pre></td></tr></table></figure><ol start="2"><li>启用 GitHub Pages 缓存<br>在 source 目录下创建 .nojekyll 文件，避免 GitHub Pages 重新构建：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> <span class="built_in">source</span>/.nojekyll</span><br></pre></td></tr></table></figure>添加缓存头信息：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _config.yml</span></span><br><span class="line"><span class="attr">meta_generator:</span> <span class="literal">false</span>  <span class="comment"># 移除默认的&lt;meta name=&quot;generator&quot;&gt;标签</span></span><br></pre></td></tr></table></figure>五、高级优化</li><li>使用云函数中转（针对国内用户）<br>将 GitHub Pages 内容通过 Vercel&#x2F;Netlify 等平台中转，利用其全球 CDN 节点：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 Vercel 配置文件 vercel.json 中添加</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;rewrites&quot;</span>: [</span><br><span class="line">    &#123; <span class="string">&quot;source&quot;</span>: <span class="string">&quot;/(.*)&quot;</span>, <span class="string">&quot;destination&quot;</span>: <span class="string">&quot;https://your-github-pages-url.github.io/<span class="variable">$1</span>&quot;</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>预加载关键资源<br>在主题的模板文件中添加：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">预览</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preload&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/css/main.css&quot;</span> <span class="attr">as</span>=<span class="string">&quot;style&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preload&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/js/main.js&quot;</span> <span class="attr">as</span>=<span class="string">&quot;script&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="六、性能测试与监控"><a href="#六、性能测试与监控" class="headerlink" title="六、性能测试与监控"></a>六、性能测试与监控</h1><ol><li>使用 Lighthouse 检测<br>在 Chrome 浏览器中按 F12 → Audits → 运行 Lighthouse，重点关注：</li></ol><p>First Contentful Paint (FCP)：首屏渲染时间<br>Largest Contentful Paint (LCP)：最大内容渲染时间<br>Total Blocking Time (TBT)：主线程阻塞时间<br>2. 对比测试<br>使用 WebPageTest 对比你的博客与同类 Hexo 博客的加载速度。<br>检查 Network 面板，找出加载最慢的资源（如大图片、第三方脚本）。<br>七、常见问题排查</p><ol><li>主题配置冲突<br>某些主题的默认配置可能导致性能问题，检查主题文档中的优化建议。</li><li>本地环境与线上差异<br>本地预览 (hexo server) 的速度不代表线上性能，务必部署后测试。</li><li>GitHub Actions 构建超时<br>若使用 GitHub Actions 自动部署，可在 .github&#x2F;workflows 中增加内存配置：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">fetch-depth:</span> <span class="number">0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&#x27;16&#x27;</span></span><br><span class="line">          <span class="attr">cache:</span> <span class="string">&#x27;npm&#x27;</span></span><br></pre></td></tr></table></figure></li></ol><p>通过以上优化，Hexo 博客在 GitHub Pages 上的加载速度通常能提升 50% 以上。如果问题仍存在，建议提供具体的博客链接或 Lighthouse 报告，以便进一步分析。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vite-plus</title>
      <link href="/2025/06/02/vite-plus/"/>
      <url>/2025/06/02/vite-plus/</url>
      
        <content type="html"><![CDATA[<h1 id="vite常用插件总结"><a href="#vite常用插件总结" class="headerlink" title="vite常用插件总结"></a>vite常用插件总结</h1><h2 id="rollup-plugin-remove-others-console"><a href="#rollup-plugin-remove-others-console" class="headerlink" title="rollup-plugin-remove-others-console"></a>rollup-plugin-remove-others-console</h2><p>这个插件是我自己开发的，在生产环境中可以根据 git 作者信息移除非自己的 console 语句，无任何配置负担，优化开发体验～<br>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install rollup-plugin-remove-others-console --save-dev</span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> removeConsole <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-remove-others-console&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">removeConsole</span>()],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="vite-tsconfig-paths"><a href="#vite-tsconfig-paths" class="headerlink" title="vite-tsconfig-paths"></a>vite-tsconfig-paths</h2><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vite-tsconfig-paths --save-dev</span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> tsconfigPaths <span class="keyword">from</span> <span class="string">&#x27;vite-tsconfig-paths&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">tsconfigPaths</span>()],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>配置tsconfig.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@utils/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/utils/*&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>页面引用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; formatDate &#125; <span class="keyword">from</span> <span class="string">&#x27;@utils/date&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="vite-aliases"><a href="#vite-aliases" class="headerlink" title="vite-aliases"></a>vite-aliases</h2><p>根据项目结构自动生成模块别名，减少手动配置的麻烦。<br>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vite-aliases --save-dev</span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> aliases <span class="keyword">from</span> <span class="string">&#x27;vite-aliases&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">aliases</span>()],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>引用方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Button</span> <span class="keyword">from</span> <span class="string">&#x27;@components/Button.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; format &#125; <span class="keyword">from</span> <span class="string">&#x27;@utils/format&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="vite-plugin-vconsole"><a href="#vite-plugin-vconsole" class="headerlink" title="vite-plugin-vconsole"></a>vite-plugin-vconsole</h3><p>集成 VConsole，帮助开发者在移动设备上进行调试。<br>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vite-plugin-vconsole --save-dev</span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> vconsole <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-vconsole&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">vconsole</span>(&#123;</span><br><span class="line">      <span class="attr">entry</span>: <span class="string">&#x27;src/main.ts&#x27;</span>,</span><br><span class="line">      <span class="attr">enabled</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="vite-plugin-mock-server"><a href="#vite-plugin-mock-server" class="headerlink" title="vite-plugin-mock-server"></a>vite-plugin-mock-server</h2><p>提供 Mock 服务器，支持 TypeScript 和 JavaScript 编写 Mock API，支持热更新和 express.js 中间件。<br>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vite-plugin-mock-server --save-dev</span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> mockServer <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-mock-server&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">mockServer</span>(&#123;</span><br><span class="line">      <span class="attr">mockRootDir</span>: <span class="string">&#x27;./mock&#x27;</span>,</span><br><span class="line">      <span class="attr">urlPrefixes</span>: [<span class="string">&#x27;/api/&#x27;</span>],</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="vitawind"><a href="#vitawind" class="headerlink" title="vitawind"></a>vitawind</h2><p>自动安装和配置 Tailwind CSS，支持 JIT 模式，简化样式开发。<br>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vitawind --save-dev</span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> vitawind <span class="keyword">from</span> <span class="string">&#x27;vitawind&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vitawind</span>()],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="vite-plugin-restart"><a href="#vite-plugin-restart" class="headerlink" title="vite-plugin-restart"></a>vite-plugin-restart</h2><p>监控指定文件或模式的变化，自动重启 Vite 服务器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vite-plugin-restart --save-dev</span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> restart <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-restart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">restart</span>(&#123;</span><br><span class="line">      <span class="attr">restart</span>: [<span class="string">&#x27;vite.config.ts&#x27;</span>, <span class="string">&#x27;src/config/**/*&#x27;</span>],</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="vite-plugin-tips"><a href="#vite-plugin-tips" class="headerlink" title="vite-plugin-tips"></a>vite-plugin-tips</h3><p>在页面上显示更详细的开发服务器状态提示，提升开发体验。<br>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vite-plugin-tips --save-dev</span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> tips <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-tips&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">tips</span>()],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="unplugin-auto-import"><a href="#unplugin-auto-import" class="headerlink" title="unplugin-auto-import"></a>unplugin-auto-import</h3><p>自动按需导入 API，支持 Vite、Webpack 等，减少手动导入的繁琐。<br>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install unplugin-auto-import --save-dev</span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AutoImport</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-auto-import/vite&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title class_">AutoImport</span>(&#123;</span><br><span class="line">      <span class="attr">imports</span>: [<span class="string">&#x27;vue&#x27;</span>, <span class="string">&#x27;vue-router&#x27;</span>],</span><br><span class="line">      <span class="attr">dts</span>: <span class="string">&#x27;src/auto-imports.d.ts&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go语言代码如何传入npm包</title>
      <link href="/2024/11/20/2024112103/"/>
      <url>/2024/11/20/2024112103/</url>
      
        <content type="html"><![CDATA[<h1 id="1-创建go项目"><a href="#1-创建go项目" class="headerlink" title="1. 创建go项目"></a>1. 创建go项目</h1><p>使用go mod tidy 初始化项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go mod tidy</span><br></pre></td></tr></table></figure><h1 id="2-创建package-json"><a href="#2-创建package-json" class="headerlink" title="2. 创建package.json"></a>2. 创建package.json</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><h1 id="3-在package-json写命令"><a href="#3-在package-json写命令" class="headerlink" title="3.在package.json写命令"></a>3.在package.json写命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;start&quot;</span>: <span class="string">&quot;go run main.go&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;go build -o index.js -ldflags=\&quot;-s -w\&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-上传npm包"><a href="#4-上传npm包" class="headerlink" title="4. 上传npm包"></a>4. 上传npm包</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure><h1 id="5-使用npm包"><a href="#5-使用npm包" class="headerlink" title="5. 使用npm包"></a>5. 使用npm包</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install go-npm-xyj</span><br></pre></td></tr></table></figure><h1 id="6-使用npm包"><a href="#6-使用npm包" class="headerlink" title="6. 使用npm包"></a>6. 使用npm包</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const goNpmXyj = require(<span class="string">&#x27;go-npm-xyj&#x27;</span>);</span><br><span class="line">goNpmXyj.main();</span><br></pre></td></tr></table></figure><p>“publishConfig”: {<br>    “registry”: “<a href="https://registry.npmjs.org/">https://registry.npmjs.org</a>“<br>}</p>]]></content>
      
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ffmpeg的一些简单用法</title>
      <link href="/2024/11/20/2024112102/"/>
      <url>/2024/11/20/2024112102/</url>
      
        <content type="html"><![CDATA[<p>如何在视频中提取音频</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input_video.mp4 -vn -acodec libmp3lame -q:a 2 output_audio.mp3</span><br></pre></td></tr></table></figure><ul><li>-i 输入文件</li><li>-vn 不处理视频</li><li>-acodec libmp3lame 使用libmp3lame编码器</li><li>-q:a 2 设置音频质量为2</li><li>output_audio.mp3 输出文件</li></ul><p>如何给一段音频添加背景音乐</p><h1 id="1-将背景音乐音量设置为0-5"><a href="#1-将背景音乐音量设置为0-5" class="headerlink" title="1. 将背景音乐音量设置为0.5"></a>1. 将背景音乐音量设置为0.5</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i background_audio.mp3 -af <span class="string">&quot;volume=0.5&quot;</span> background_audio_quiet.mp3</span><br></pre></td></tr></table></figure><ul><li>background_audio.mp3 背景音乐</li><li>background_audio_quiet.mp3 背景音乐音量设置为0.5</li></ul><h1 id="2-将背景音乐和音频混合"><a href="#2-将背景音乐和音频混合" class="headerlink" title="2. 将背景音乐和音频混合"></a>2. 将背景音乐和音频混合</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input_audio.mp3 -i background_audio_quiet.mp3 -filter_complex amix=inputs=2:duration=longest  output_audio.mp3</span><br></pre></td></tr></table></figure><ul><li>inputs&#x3D;2:duration&#x3D;shortest 指定输入音频数量为2，并且以短的音频为基准 first以长视频为准 longest混合</li><li>output_audio.mp3 输出文件</li></ul><p>如何混合后音频长度背景音乐一致</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i 1.mp3 -i temp_audio_1.mp3 -filter_complex <span class="string">&quot;[1]anull[bg];[bg]aloop=loop=-1:size=2e+7[looped_bg];[0]anull[main];[looped_bg][main]amix=inputs=2:duration=first&quot;</span> temp_out_audio.mp3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>降低采样率和声道数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input_audio.mp3 -ar 22050 -ac 1 input_audio_adjusted.mp3</span><br><span class="line">ffmpeg -i background_audio.mp3 -ar 22050 -ac 1 background_audio_adjusted.mp3</span><br></pre></td></tr></table></figure><ul><li>-ar 22050 将采样率降低到 22050Hz，-ac 1 将声道数调整为 1。</li></ul><p>合并<br>ffmpeg -i input_audio_adjusted.mp3 -i background_audio_adjusted.mp3 -filter_complex “[1]anull[bg];[bg]aloop&#x3D;loop&#x3D;-1:size&#x3D;1e+6[looped_bg];[0]anull[main];[looped_bg][main]amix&#x3D;inputs&#x3D;2:duration&#x3D;first” temp_out_audio.mp3</p><p>如何截取不要某一段音频</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input_audio.mp3 -ss 00:00:00 -to 00:00:10 -c copy output_audio.mp3</span><br></pre></td></tr></table></figure><ul><li>-ss 00:00:00 开始时间</li><li>-to 00:00:10 结束时间</li><li>-c copy 不重新编码</li><li>output_audio.mp3 输出文件</li></ul><h1 id="1-截取不要某一段音频"><a href="#1-截取不要某一段音频" class="headerlink" title="1. 截取不要某一段音频"></a>1. 截取不要某一段音频</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input_audio.mp3 -ss 00:00:00 -to 00:00:10 -c:a copy temp_audio_1.mp3</span><br><span class="line">ffmpeg -i input_audio.mp3 -ss 00:00:30 -c:a copy temp_audio_2.mp3</span><br><span class="line"><span class="built_in">cat</span> temp_audio_1.mp3 temp_audio_2.mp3 &gt; output_audio.mp3</span><br><span class="line"><span class="built_in">rm</span> temp_audio_1.mp3 temp_audio_2.mp3</span><br></pre></td></tr></table></figure><ul><li>ffmpeg -i input_audio.mp3 -ss 00:00:00 -to 00:00:10 -c:a copy temp_audio_1.mp3</li><li>-i input_audio.mp3：指定输入的原音频文件。</li><li>-ss 00:00:00：指定开始时间。</li><li>-to 00:00:10：指定结束时间。</li><li>-c:a copy：指定音频编码器为copy，不重新编码。</li><li>temp_audio_1.mp3：指定输出文件名。</li></ul><h1 id="2-截取音频"><a href="#2-截取音频" class="headerlink" title="2. 截取音频"></a>2. 截取音频</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input_audio.mp3 -ss 00:00:30 -c:a copy temp_audio_2.mp3</span><br></pre></td></tr></table></figure><ul><li>-i input_audio.mp3：再次指定输入的原音频文件。</li><li>-ss 00:00:30：指定开始时间。</li><li>-c:a copy：指定音频编码器为copy，不重新编码。</li><li>temp_audio_2.mp3：指定输出文件名。</li></ul><h1 id="3-合并音频"><a href="#3-合并音频" class="headerlink" title="3. 合并音频"></a>3. 合并音频</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> temp_audio_1.mp3 temp_audio_2.mp3 &gt; output_audio.mp3</span><br></pre></td></tr></table></figure><ul><li>这一步是将前面截取得到的两个临时音频文件（temp_audio_1.mp3 和 temp_audio_2.mp3）进行拼接，拼接后的结果保存为 output_audio.mp3。</li></ul><h1 id="4-删除临时文件"><a href="#4-删除临时文件" class="headerlink" title="4. 删除临时文件"></a>4. 删除临时文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> temp_audio_1.mp3 temp_audio_2.mp3</span><br></pre></td></tr></table></figure><p>合并多个音频<br>先建文件夹 audio_list.txt 写入：<br>file ‘audio1.mp3’<br>file ‘audio2.mp3’<br>file ‘audio3.mp3’</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -f concat -i audio_list.txt -c copy output_cat_audio.mp3</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ffmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用vite配置rollup</title>
      <link href="/2024/11/20/2024112101/"/>
      <url>/2024/11/20/2024112101/</url>
      
        <content type="html"><![CDATA[<h2 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1.安装依赖"></a>1.安装依赖</h2><p>确保安装Vite</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vite --save-dev</span><br></pre></td></tr></table></figure><p>安装和Rollup相关的依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @rollup/plugin-commonjs @rollup/plugin-node-resolve rollup --save-dev</span><br></pre></td></tr></table></figure><ul><li>plugin-commonjs用于处理CommonJS 模块</li><li>plugin-node-resolve用于解析模块路径</li></ul><h2 id="2-创建-Rollup-配置文件"><a href="#2-创建-Rollup-配置文件" class="headerlink" title="2.创建 Rollup 配置文件"></a>2.创建 Rollup 配置文件</h2><p>在根目录创建rollup.config.js文件,内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;rollup&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> resolve <span class="keyword">from</span> <span class="string">&#x27;@rollup/plugin-node-resolve&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> commonjs <span class="keyword">from</span> <span class="string">&#x27;@rollup/plugin-commonjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">input</span>: <span class="string">&#x27;src/main.js&#x27;</span>, <span class="comment">// 你的入口文件路径，根据实际情况修改</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">file</span>: <span class="string">&#x27;dist/bundle.js&#x27;</span>, <span class="comment">// 输出文件路径和名称，可按需调整</span></span><br><span class="line">    <span class="attr">format</span>: <span class="string">&#x27;esm&#x27;</span> <span class="comment">// 输出模块格式，可以是 &#x27;esm&#x27;、&#x27;cjs&#x27;、&#x27;umd&#x27; 等，这里以ES模块为例</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">resolve</span>(),</span><br><span class="line">    <span class="title function_">commonjs</span>()</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>input: 指定入口文件路径</li><li>output: 指定输出文件路径和名称，以及模块格式</li><li>plugins: 使用插件处理模块</li><li>format: 指定输出模块格式: esm、cjs、umd</li></ul><p>esm、cjs、umd三种格式的区别</p><ul><li>esm: 使用ES模块格式</li><li>cjs: 使用CommonJS模块格式</li><li>umd: 使用UMD模块格式</li></ul><h2 id="3-根目录创建vite-config-js文件"><a href="#3-根目录创建vite-config-js文件" class="headerlink" title="3.根目录创建vite.config.js文件"></a>3.根目录创建vite.config.js文件</h2><p>vite.config.js文件内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> rollupConfig <span class="keyword">from</span> <span class="string">&#x27;./rollup.config.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="attr">rollupOptions</span>: rollupConfig</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="4-package-json配置"><a href="#4-package-json配置" class="headerlink" title="4.package.json配置"></a>4.package.json配置</h2><p>在package.json文件中添加build脚本</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rollup -c&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>-c: 指定rollup配置文件路径</li></ul><h2 id="5-运行build命令"><a href="#5-运行build命令" class="headerlink" title="5.运行build命令"></a>5.运行build命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>— 注意必须在package.json文件中将type设置为module</p>]]></content>
      
      
      
        <tags>
            
            <tag> vite </tag>
            
            <tag> rollup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx配置https访问</title>
      <link href="/2024/11/09/hello-world/"/>
      <url>/2024/11/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>https证书怎么获取，教程很多，就不在这里说了，主要记录一下如何开启nginx的https服务，以及配置http转发https.</p><h2 id="第一步，打开nginx配置文件nginx-conf-打开https服务"><a href="#第一步，打开nginx配置文件nginx-conf-打开https服务" class="headerlink" title="第一步，打开nginx配置文件nginx.conf.打开https服务"></a>第一步，打开nginx配置文件nginx.conf.打开https服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#server &#123;</span></span><br><span class="line"><span class="comment">#    listen       443 ssl;</span></span><br><span class="line"><span class="comment">#    server_name  localhost;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#    ssl_certificate      cert.pem;</span></span><br><span class="line"><span class="comment">#    ssl_certificate_key  cert.key;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class="line"><span class="comment">#    ssl_session_timeout  5m;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class="line"><span class="comment">#    ssl_prefer_server_ciphers  on;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#    location / &#123;</span></span><br><span class="line"><span class="comment">#        root   html;</span></span><br><span class="line"><span class="comment">#        index  index.html index.htm;</span></span><br><span class="line"><span class="comment">#    &#125;</span></span><br></pre></td></tr></table></figure><h2 id="第二步，server（80下的server）加入以下配置"><a href="#第二步，server（80下的server）加入以下配置" class="headerlink" title="第二步，server（80下的server）加入以下配置"></a>第二步，server（80下的server）加入以下配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server_name  _;</span><br><span class="line"><span class="built_in">return</span> 301 https://$host<span class="variable">$request_uri</span>; </span><br></pre></td></tr></table></figure><h2 id="第三步-在443下的的server的location下加入如下配置"><a href="#第三步-在443下的的server的location下加入如下配置" class="headerlink" title="第三步,在443下的的server的location下加入如下配置"></a>第三步,在443下的的server的location下加入如下配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_pass   你的域名</span><br></pre></td></tr></table></figure><h3 id="注意，你的后台服务记得在443下面配置映射，如下："><a href="#注意，你的后台服务记得在443下面配置映射，如下：" class="headerlink" title="注意，你的后台服务记得在443下面配置映射，如下："></a>注意，你的后台服务记得在443下面配置映射，如下：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location /api/ &#123;</span><br><span class="line"></span><br><span class="line">proxy_pass 你的后端访问路径;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后重启nginx就可以使用https访问了。</p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
          <category> https </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何实现软路由功能</title>
      <link href="/2024/11/01/2024110110/"/>
      <url>/2024/11/01/2024110110/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Script to set up network sharing with static IP</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define network interfaces and IP addresses</span></span><br><span class="line"></span><br><span class="line">LAN_INTERFACE=<span class="string">&quot;eth0&quot;</span></span><br><span class="line"></span><br><span class="line">WIFI_INTERFACE=<span class="string">&quot;wlan0&quot;</span></span><br><span class="line"></span><br><span class="line">LAN_IP=<span class="string">&quot;192.168.0.1&quot;</span></span><br><span class="line"></span><br><span class="line">DHCP_RANGE=<span class="string">&quot;192.168.0.10,192.168.0.50,12h&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable IP forwarding</span></span><br><span class="line"></span><br><span class="line">sysctl net.ipv4.ip_forward=1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set up iptables rules</span></span><br><span class="line"></span><br><span class="line">iptables -A POSTROUTING -t nat -o <span class="variable">$WIFI_INTERFACE</span> -j MASQUERADE</span><br><span class="line"></span><br><span class="line">iptables -A FORWARD -i <span class="variable">$WIFI_INTERFACE</span> -o <span class="variable">$LAN_INTERFACE</span> -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line"></span><br><span class="line">iptables -A FORWARD -i <span class="variable">$LAN_INTERFACE</span> -o <span class="variable">$WIFI_INTERFACE</span> -j ACCEPT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Start dnsmasq</span></span><br><span class="line"></span><br><span class="line">service dnsmasq start</span><br><span class="line"></span><br><span class="line">service dnsmasq restart</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Save iptables rules</span></span><br><span class="line"></span><br><span class="line">iptables-save | <span class="built_in">tee</span> /etc/iptables.rules</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Configure static IP for LAN interface</span></span><br><span class="line"></span><br><span class="line">ifconfig <span class="variable">$LAN_INTERFACE</span> <span class="variable">$LAN_IP</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;interface <span class="variable">$LAN_INTERFACE</span>&quot;</span> &gt;&gt; /etc/dnsmasq.conf</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;dhcp-range=<span class="variable">$LAN_IP</span>,<span class="variable">$DHCP_RANGE</span>&quot;</span> &gt;&gt; /etc/dnsmasq.conf</span><br></pre></td></tr></table></figure><p>注意端口占用，需要kill</p>]]></content>
      
      
      <categories>
          
          <category> ssh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反向ssh</title>
      <link href="/2024/11/01/2024110109/"/>
      <url>/2024/11/01/2024110109/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是ssh？"><a href="#什么是ssh？" class="headerlink" title="什么是ssh？"></a>什么是ssh？</h2><p>SSH 为 Secure Shell 的缩写，SSH 为建立在应用层基础上的安全协议。SSH 是较可靠，专为远程登录会话和其他网络服务提供安全性的协议。</p><h2 id="什么是ssh反向连接？"><a href="#什么是ssh反向连接？" class="headerlink" title="什么是ssh反向连接？"></a>什么是ssh反向连接？</h2><p>反向连接是指主机A（受控端）主动连接主机B（控制端），在主机A和主机B之间建立一个远程连接，通过这个连接主机B可以主动的向主机A发送一些请求。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li><p>平时我们登录远程服务器，一般使用ssh登录远程服务器</p></li><li><p>现在我们想通过远程服务器反向操作登录本地PC，但由于一般本地PC没有公网IP，导致远程服务器使用正常ssh命令无法登录PC，这个时候就需要使用ssh反向连接功能。</p></li></ol><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol><li><p>使用ps -ef | grep sshd 确定主机A，和主机B都运行了sshd。如果没有运行sshd，则需要执行sudo apt-get install openssh-server 安装openssh-server</p></li><li><p>主机A执行命令与服务器建立连接：ssh -CqTfnN -R :11111:localhost:22 <a href="mailto:&#114;&#x6f;&#111;&#x74;&#x40;&#x31;&#56;&#50;&#46;&#50;&#53;&#x34;&#46;&#49;&#x33;&#53;&#x2e;&#x32;&#51;&#57;">&#114;&#x6f;&#111;&#x74;&#x40;&#x31;&#56;&#50;&#46;&#50;&#53;&#x34;&#46;&#49;&#x33;&#53;&#x2e;&#x32;&#51;&#57;</a>，其中182.254.135.239是服务器的地址，然后输入主机B的密码。</p></li><li><p>主机B（服务器）执行命令远程登录主机A：ssh test@localhost -p 11111,其中test为主机A的用户，然后输入主机A test主机的用户名 的密码，即可ssh登录到主机A。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> ssh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker run的命令讲解</title>
      <link href="/2024/11/01/2024110108/"/>
      <url>/2024/11/01/2024110108/</url>
      
        <content type="html"><![CDATA[<p>当我们运行一个docker run 的时候，里面有许多命令，如果需要加卷来映射本地路径需要怎么做，下面图解一条相对完整的docker命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name webl -p 80:80 -v /usr/share/nginx/html nginx</span><br></pre></td></tr></table></figure><p>&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html下产生新的目录html 运行的端口为80</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css动画的属性及基础用法</title>
      <link href="/2024/11/01/2024110107/"/>
      <url>/2024/11/01/2024110107/</url>
      
        <content type="html"><![CDATA[<p>css3出现以后，css的动画就使用的特别广泛，下面是我在使用css3动画的一些理解。</p><h2 id="css3动画的基础用法"><a href="#css3动画的基础用法" class="headerlink" title="css3动画的基础用法"></a>css3动画的基础用法</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> 动画名称&#123;</span><br><span class="line">  动画的操作属性</span><br><span class="line">&#125;</span><br><span class="line">使用动画的标签&#123;</span><br><span class="line">  <span class="attribute">animation-name</span>:动画名称;<span class="comment">/*需要执行的动画的名字*/</span></span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">3s</span>;<span class="comment">/*所需要的时间*/</span></span><br><span class="line">  <span class="attribute">animation-iteration-count</span>: infinite;<span class="comment">/* 执行次数*/</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="css3动画的基础属性"><a href="#css3动画的基础属性" class="headerlink" title="css3动画的基础属性"></a>css3动画的基础属性</h2><p>下面是对具体值的解释：</p><table><thead><tr><th>类别</th><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>曲线速率</td><td>linear</td><td>匀速线性运动</td></tr><tr><td>曲线速率</td><td>steps(数字)</td><td>逐帧动画(一般配合精灵图使用）</td></tr><tr><td>曲线速率</td><td>ease-in-out</td><td>慢速开始和结束</td></tr><tr><td>动画次数</td><td>number</td><td>定义运动的次数，默认是一次</td></tr><tr><td>动画次数</td><td>infinite</td><td>无限运动</td></tr><tr><td>动画方向</td><td>alternate</td><td>逆向运动(运动次数需要大于1才能看出效果)</td></tr><tr><td>动画终点</td><td>none(默认值)</td><td>默认终点是原点</td></tr><tr><td>动画终点</td><td>forwards</td><td>在运动结束的之后，停到结束位</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">## 示例演示：</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>动画示例演示<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#550000</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">animation</span>: ani <span class="number">3s</span> <span class="number">2</span> linear forwards alternate;</span></span><br><span class="line"><span class="language-css">      </span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">animation-play-state</span>: paused;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> ani &#123;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">form</span> &#123;&#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">to</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">400px</span>);</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>动画示例演示<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次rollup打包过程</title>
      <link href="/2024/11/01/2024110106/"/>
      <url>/2024/11/01/2024110106/</url>
      
        <content type="html"><![CDATA[<h2 id="安装roolup"><a href="#安装roolup" class="headerlink" title="安装roolup"></a>安装roolup</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D rollup</span><br></pre></td></tr></table></figure><h2 id="安装其他插件"><a href="#安装其他插件" class="headerlink" title="安装其他插件"></a>安装其他插件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D @rollup/plugin-commonjs rollup-plugin-terser rollup-plugin-typescript2</span><br></pre></td></tr></table></figure><p>插件说明：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@rollup/plugin-commonjs：让rollup知道项目用了那些依赖，打包的时候不要忘了</span><br><span class="line">rollup-plugin-terser：压缩代码</span><br><span class="line">rollup-plugin-typescript2：让rollup可以看懂<span class="variable constant_">TS</span>代码</span><br></pre></td></tr></table></figure><h2 id="rollup配置文件"><a href="#rollup配置文件" class="headerlink" title="rollup配置文件"></a>rollup配置文件</h2><p>新建rollup.config.js配置文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入依赖</span></span><br><span class="line">  <span class="keyword">const</span> &#123; terser &#125; = <span class="built_in">require</span>(<span class="string">&#x27;rollup-plugin-terser&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> commonjs = <span class="built_in">require</span>(<span class="string">&#x27;@rollup/plugin-commonjs&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> typescript = <span class="built_in">require</span>(<span class="string">&#x27;rollup-plugin-typescript2&#x27;</span>)</span><br><span class="line">  ​</span><br><span class="line">  <span class="comment">// tsconfig.json合并选项</span></span><br><span class="line">  <span class="comment">// 一般来说默认使用项目的tsconfig.json，如果有个别需要修改的如下，可以在此修改</span></span><br><span class="line">  <span class="keyword">const</span> override = &#123; <span class="attr">compilerOptions</span>: &#123; <span class="attr">module</span>: <span class="string">&#x27;ESNext&#x27;</span> &#125; &#125;</span><br><span class="line">  ​</span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 项目入口</span></span><br><span class="line">    <span class="attr">input</span>: <span class="string">&#x27;src/app.ts&#x27;</span>,</span><br><span class="line">  ​</span><br><span class="line">    <span class="comment">// 打包后的出口和设置</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">      <span class="attr">file</span>: <span class="string">&#x27;dist/app.min.js&#x27;</span>,</span><br><span class="line">      <span class="attr">format</span>: <span class="string">&#x27;cjs&#x27;</span>,</span><br><span class="line">      <span class="attr">sourcemap</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">exports</span>: <span class="string">&#x27;default&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ​</span><br><span class="line">    <span class="comment">// 使用的插件</span></span><br><span class="line">    <span class="comment">// 注意，这里的插件使用是有顺序的，先把ts编译为js，然后查找依赖，最后压缩</span></span><br><span class="line">    <span class="attr">plugins</span>: [<span class="title function_">typescript</span>(&#123; <span class="attr">tsconfig</span>: <span class="string">&#x27;./tsconfig.json&#x27;</span>, <span class="attr">tsconfigOverride</span>: override &#125;), <span class="title function_">commonjs</span>(), <span class="title function_">terser</span>()],</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="package-json配置"><a href="#package-json配置" class="headerlink" title="package.json配置"></a>package.json配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;rollup:build&quot;</span>: <span class="string">&quot;rollup -c&quot;</span>  //-c表示按照配置文件运行</span><br></pre></td></tr></table></figure><h2 id="运行命令"><a href="#运行命令" class="headerlink" title="运行命令"></a>运行命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn rollup:build</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> rollup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在npm中发布自己开发的插件</title>
      <link href="/2024/11/01/2024110105/"/>
      <url>/2024/11/01/2024110105/</url>
      
        <content type="html"><![CDATA[<h2 id="注册npm账号，打开-https-www-npmjs-com-signup-进行注册"><a href="#注册npm账号，打开-https-www-npmjs-com-signup-进行注册" class="headerlink" title="注册npm账号，打开 https://www.npmjs.com/signup 进行注册"></a>注册npm账号，打开 <a href="https://www.npmjs.com/signup">https://www.npmjs.com/signup</a> 进行注册</h2><h2 id="初始化需要上传的包，新建一个文件夹，运行"><a href="#初始化需要上传的包，新建一个文件夹，运行" class="headerlink" title="初始化需要上传的包，新建一个文件夹，运行"></a>初始化需要上传的包，新建一个文件夹，运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p>根据提示会在文件夹中生成一个package.json文件，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   </span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;xyj-3d&quot;</span>, <span class="comment">#包名</span></span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.3&quot;</span>,#版本号</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;cesium-plus&quot;</span>,#信息 </span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;xyj.min.js&quot;</span>,#入口文件</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;xyj&quot;</span>,#作者</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>确保npm是npm源，不是其他源，安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">npm install -g nrm</span><br><span class="line"></span><br><span class="line">//查看本地所有镜像，带 * 的是当前使用的镜像</span><br><span class="line">nrm <span class="built_in">ls</span></span><br><span class="line">//添加一个自己的源</span><br><span class="line">nrm add xxx http://xxxnpm.cn/</span><br><span class="line"></span><br><span class="line">//使用指定源</span><br><span class="line">nrm use xxx</span><br><span class="line">//删除指定源</span><br><span class="line">nrm del xxx</span><br><span class="line">使用</span><br><span class="line"></span><br><span class="line">npm login</span><br><span class="line">输入用户名和密码登录，注意，每次登录都需要一个动态验证码。登录成功后执行</span><br><span class="line"></span><br><span class="line">npm publish </span><br><span class="line">即可发布成功，现在可以去npm上搜索你的插件了。使用的时候和其他插件一样。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器跨域消息传递</title>
      <link href="/2024/11/01/2024110104/"/>
      <url>/2024/11/01/2024110104/</url>
      
        <content type="html"><![CDATA[<h2 id="父页面给子页面传值"><a href="#父页面给子页面传值" class="headerlink" title="父页面给子页面传值"></a>父页面给子页面传值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> iframe = <span class="variable language_">document</span>.<span class="title function_">getElementId</span>(<span class="string">&#x27;iframe&#x27;</span>)<span class="comment">//iframe容器</span></span><br><span class="line">iframe.<span class="property">contentWindow</span>.<span class="title function_">postMessage</span>(&#123;<span class="attr">msg</span>: <span class="string">&#x27;来自父页面的消息&#x27;</span>&#125;, <span class="string">&quot;*&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="子页面接收消息"><a href="#子页面接收消息" class="headerlink" title="子页面接收消息"></a>子页面接收消息</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  <span class="variable language_">window</span>.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">data</span>.<span class="property">msg</span>) <span class="comment">// 来自父页面的消息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="子页面给父页面传递消息"><a href="#子页面给父页面传递消息" class="headerlink" title="子页面给父页面传递消息"></a>子页面给父页面传递消息</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">parent</span>.<span class="title function_">postMessage</span>(&#123;<span class="attr">msg</span>: <span class="string">&#x27;来自子页面值&#x27;</span>&#125;, <span class="string">&quot;*&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="父页面接收消息"><a href="#父页面接收消息" class="headerlink" title="父页面接收消息"></a>父页面接收消息</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">data</span>.<span class="property">msg</span>) <span class="comment">// 来自子页面值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue打包后出现文件过大加载速度过慢问题解决方案</title>
      <link href="/2024/11/01/2024110103/"/>
      <url>/2024/11/01/2024110103/</url>
      
        <content type="html"><![CDATA[<p>我们在处理网站加载速度过慢问题是，首先想到的是cdn加速，还有一种解决方案，这种方案作用于nginx服务。</p><p>下面是我做网站配置的解决方案：</p><h2 id="新建一个vue项目，打包之后发现会有一个文件特别大，特别是引入的插件越多，这个文件就越大，查阅资料发现这是我们的node-modules打包之后生成的文件。"><a href="#新建一个vue项目，打包之后发现会有一个文件特别大，特别是引入的插件越多，这个文件就越大，查阅资料发现这是我们的node-modules打包之后生成的文件。" class="headerlink" title="新建一个vue项目，打包之后发现会有一个文件特别大，特别是引入的插件越多，这个文件就越大，查阅资料发现这是我们的node_modules打包之后生成的文件。"></a>新建一个vue项目，打包之后发现会有一个文件特别大，特别是引入的插件越多，这个文件就越大，查阅资料发现这是我们的node_modules打包之后生成的文件。</h2><h2 id="webpack配置可以将文件打包为-gz文件，传入nginx服务器之后，开启相关配置，他就会自动解压，这是这个文件就会成倍的减小。"><a href="#webpack配置可以将文件打包为-gz文件，传入nginx服务器之后，开启相关配置，他就会自动解压，这是这个文件就会成倍的减小。" class="headerlink" title="webpack配置可以将文件打包为.gz文件，传入nginx服务器之后，开启相关配置，他就会自动解压，这是这个文件就会成倍的减小。"></a>webpack配置可以将文件打包为.gz文件，传入nginx服务器之后，开启相关配置，他就会自动解压，这是这个文件就会成倍的减小。</h2><p>webpack的配置如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//js html css配置</span></span><br><span class="line"><span class="attr">configureWebpack</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/* gzip压缩 */</span></span><br><span class="line">  <span class="keyword">const</span> productionGzipExtensions = [<span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;css&#x27;</span>]</span><br><span class="line">  config.<span class="property">plugins</span>.<span class="title function_">push</span>(</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">CompressionWebpackPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;[path][base].gz&#x27;</span>,</span><br><span class="line">        <span class="attr">algorithm</span>: <span class="string">&#x27;gzip&#x27;</span>,</span><br><span class="line">        <span class="attr">test</span>: <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;\\.(&#x27;</span> + productionGzipExtensions.<span class="title function_">join</span>(<span class="string">&#x27;|&#x27;</span>) + <span class="string">&#x27;)$&#x27;</span>),</span><br><span class="line">        <span class="attr">threshold</span>: <span class="number">10240</span>, <span class="comment">// 只有大小大于该值的资源会被处理 10240</span></span><br><span class="line">        <span class="attr">minRatio</span>: <span class="number">0.8</span>, <span class="comment">// 只有压缩率小于这个值的资源才会被处理</span></span><br><span class="line">        <span class="attr">deleteOriginalAssets</span>: <span class="literal">false</span>, <span class="comment">// 删除原文件</span></span><br><span class="line">      &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要导入的插件是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i compression-webpack-plugin</span><br></pre></td></tr></table></figure><p>图片压缩的代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">chainWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">         <span class="comment">/* 压缩图片 */</span></span><br><span class="line">        config.<span class="property">module</span></span><br><span class="line">            .<span class="title function_">rule</span>(<span class="string">&#x27;images&#x27;</span>)</span><br><span class="line">            .<span class="title function_">use</span>(<span class="string">&#x27;image-webpack-loader&#x27;</span>)</span><br><span class="line">            .<span class="title function_">loader</span>(<span class="string">&#x27;image-webpack-loader&#x27;</span>)</span><br><span class="line">            .<span class="title function_">options</span>(&#123; <span class="attr">bypassOnDebug</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">            .<span class="title function_">end</span>()</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>需要导入的插件如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install image-webpack-loader --save-dev</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dockerfile的说明</title>
      <link href="/2024/11/01/2024110102/"/>
      <url>/2024/11/01/2024110102/</url>
      
        <content type="html"><![CDATA[<p>docker用的好，dockerfile配置少不了，配置好dockerfile才能打包一个正确的镜像以供使用。</p><p>#第一行配置镜像的依赖，比如这个镜像是使用go语言开发，选择开发版本，as build是一个文件名称，后面有用到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">FROM golang:1.18.3 as build</span><br><span class="line"></span><br><span class="line"><span class="comment">#WORKDIR关键字 设置工作路径</span></span><br><span class="line">WORKDIR /build</span><br><span class="line"></span><br><span class="line"><span class="comment">#把项目所有文件复制到镜像的根目录文件夹中</span></span><br><span class="line">ADD . ./</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置Go语言的环境变量，打开Go Module模式。设置包下载源，有利于快速下载包</span></span><br><span class="line">ENV GO111MODULE=on \</span><br><span class="line">GOPROXY=https://goproxy.cn</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载go.mod里面的包</span></span><br><span class="line">RUN go mod download</span><br><span class="line"></span><br><span class="line"><span class="comment">#编译</span></span><br><span class="line">RUN go build -o gin_docker .</span><br><span class="line"></span><br><span class="line"><span class="comment">#打开端口</span></span><br><span class="line">EXPOSE 8000</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行项目</span></span><br><span class="line">ENTRYPOINT  [<span class="string">&quot;./gin_docker&quot;</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java配置图片访问映射</title>
      <link href="/2024/11/01/2024110101/"/>
      <url>/2024/11/01/2024110101/</url>
      
        <content type="html"><![CDATA[<p>建立配置文件，使用config注解，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImgConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="comment">//@Value可以将配置文件的内容自动注入到属性内</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;savePath.profilePhoto&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String profilePhotoPath;   <span class="comment">//图标物理存储路径</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;savePath.profilePhotoMapper&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String profilePhotoMapperPath;   <span class="comment">//图标映射路径</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span>&#123;</span><br><span class="line">        registry.addResourceHandler(profilePhotoMapperPath+<span class="string">&quot;**&quot;</span>).addResourceLocations(<span class="string">&quot;file:&quot;</span>+profilePhotoPath);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：前面的profilePhotoMapperPath是映射的路径，后面的profilePhotoPath真实路径，这个地方是容易写错的地方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">savePath:</span><br><span class="line">    profilePhoto: <span class="string">&quot;F:/gis2.0updata/gisimg/&quot;</span>  #图标存储路径</span><br><span class="line">    profilePhotoMapper: <span class="string">&quot;/img/&quot;</span>  #图标的映射路径</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mobx的介绍和使用</title>
      <link href="/2024/10/31/2024103102/"/>
      <url>/2024/10/31/2024103102/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是mobox"><a href="#什么是mobox" class="headerlink" title="什么是mobox"></a>什么是mobox</h2><p>是一个用来管理状态的库，如果被观测组件发生改变，会自动渲染有关页面,告别setState;<br>mbox编程的3个重点：<br>    1.observer观测器：带有观测器的react组件或者属性被mobx实时观测<br>    2.observable可观测对象：由mobx建立的可观测对象<br>    3.action更新事件：标识观测对象的改变事件</p><h2 id="mobox的安装和使用"><a href="#mobox的安装和使用" class="headerlink" title="mobox的安装和使用"></a>mobox的安装和使用</h2><p>1.安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install mobx,mobx-react-lite --save</span><br><span class="line">根目录新建store文件并在store中新建index.js和test.Store.js</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">// test.Store.js module</span><br><span class="line">    import &#123; makeAutoObservable &#125; from <span class="string">&#x27;mobx&#x27;</span></span><br><span class="line">    </span><br><span class="line">    class TestStore &#123;</span><br><span class="line">    </span><br><span class="line">      userInfo = &#123;&#125;</span><br><span class="line">      <span class="function"><span class="title">constructor</span></span>() &#123;</span><br><span class="line">        // 响应式</span><br><span class="line">        makeAutoObservable(this)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="title">setUser</span></span>()&#123;</span><br><span class="line">          this.userInfo =&#123;name:<span class="string">&quot;张三&quot;</span>&#125;</span><br><span class="line">      &#125;</span><br><span class="line">      get <span class="function"><span class="title">getUser</span></span>()&#123;</span><br><span class="line">          <span class="built_in">return</span> this.userInfo </span><br><span class="line">      &#125;</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">export</span> default TestStore </span><br><span class="line">//index.js</span><br><span class="line">    // 把所有的模块做统一处理</span><br><span class="line">    // 导出一个统一的方法 useStore</span><br><span class="line">    import React from <span class="string">&quot;react&quot;</span></span><br><span class="line">    import TestStore from <span class="string">&quot;./test.Store&quot;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    import &#123; configure &#125; from <span class="string">&quot;mobx&quot;</span></span><br><span class="line">    configure(&#123;</span><br><span class="line">      enforceActions: <span class="string">&quot;never&quot;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    class RootStore &#123;</span><br><span class="line">      <span class="function"><span class="title">constructor</span></span>() &#123;</span><br><span class="line">        this.testStore = new TestStore ()</span><br><span class="line">    </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//下面的代码都是固定的，换一个平台代码也不会</span><br><span class="line"></span><br><span class="line">// 实例化根</span><br><span class="line">// 导出useStore context</span><br><span class="line">const rootStore = new RootStore()</span><br><span class="line">const context = React.createContext(rootStore)</span><br><span class="line"></span><br><span class="line">const useStore = () =&gt; React.useContext(context)</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> &#123; useStore &#125;</span><br></pre></td></tr></table></figure><p>2.使用</p><p>在使用的模块导出store</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import &#123; useStore  &#125; from <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line">    import &#123; observer &#125; from <span class="string">&#x27;mobx-react-lite&#x27;</span></span><br><span class="line">    const App=()=&gt;&#123;</span><br><span class="line">        const &#123;  testStore &#125; = useStore()</span><br><span class="line">        //使用<span class="built_in">test</span>里面的方法</span><br><span class="line">        loginStore.getUser()</span><br><span class="line">    &#125;</span><br><span class="line">    //重点：需要使用observer包装起来才可以</span><br><span class="line">    <span class="built_in">export</span> default observer(App)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mobx </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pinia的安装和使用</title>
      <link href="/2024/10/31/2024103101/"/>
      <url>/2024/10/31/2024103101/</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是-pinia"><a href="#1-什么是-pinia" class="headerlink" title="1.什么是 pinia?"></a>1.什么是 pinia?</h2><p>pinia是一个类似于vuex的状态管理工具</p><h2 id="2-inia和vuex的区别"><a href="#2-inia和vuex的区别" class="headerlink" title="2.inia和vuex的区别"></a>2.inia和vuex的区别</h2><ul><li>pinia 最初是为了探索 Vuex 的下一次迭代会是什么样子</li><li>与 Vuex 相比，Pinia 提供了一个更简单的 API，具有更少的仪式，提供了 Composition-API 风格的 API；</li><li>最重要的是，在与 TypeScript 一起使用时具有可靠的类型推断支持；</li></ul><h2 id="3-安装和使用"><a href="#3-安装和使用" class="headerlink" title="3.安装和使用"></a>3.安装和使用</h2><p>1.安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add pinia</span><br><span class="line"><span class="comment"># 或者使用 npm</span></span><br><span class="line">npm install pinia</span><br></pre></td></tr></table></figure><p>2.使用</p><ul><li>在根目录新建store文件，store中新建index.js文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// stores/counter.js</span><br><span class="line">import &#123; defineStore &#125; from <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> const useCounterStore = defineStore(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">    state: () =&gt; &#123;</span><br><span class="line">        <span class="built_in">return</span> &#123; count: 0 &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    getters:&#123;</span><br><span class="line">        //获取参数</span><br><span class="line">        getCount:state=&gt;state.count</span><br><span class="line">    &#125;,</span><br><span class="line">    // 也可以这样定义</span><br><span class="line">    // state: () =&gt; (&#123; count: 0 &#125;)</span><br><span class="line">    actions: &#123;</span><br><span class="line">        <span class="function"><span class="title">increment</span></span>() &#123;</span><br><span class="line">            this.count++;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>在main.js中导入<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import &#123;createPinia&#125; from <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line">const store = createPinia()</span><br><span class="line"><span class="built_in">let</span> app = createApp(App) </span><br><span class="line"></span><br><span class="line">app.use(store)</span><br></pre></td></tr></table></figure></li><li>在具体模块中使用<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=<span class="string">&quot;about&quot;</span>&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123;counter.count&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;count++&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;button&quot;</span>&gt;count+&lt;/button&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;add&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;button&quot;</span>&gt;count+1&lt;/button&gt;</span><br><span class="line">    &lt;!-- getters获取数据 --&gt;</span><br><span class="line">    &#123;&#123;counter.getCount&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useCounterStore &#125; from <span class="string">&#x27;@/store&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    const counter = useCounterStore();</span><br><span class="line">    const add=()=&gt;&#123;</span><br><span class="line">        counter.increment()</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li>pipia的解构</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123;storeToRefs&#125; from <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line">const counter = useCounterStore();</span><br><span class="line">const &#123;count&#125; = storeToRefs(counter)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pinia </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> pinia </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
